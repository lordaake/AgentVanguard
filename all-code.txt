

/* ==== FILE: eslint.config.js ==== */

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]


/* ==== FILE: src\App.jsx ==== */

// src/App.jsx (Crucial update from previous turn)
import { useState, useEffect } from 'react';
import Navbar from './components/Navbar';
import Footer from './components/Footer';
import HomePage from './pages/HomePage';
import './App.css';


function App() {
  const [darkMode, setDarkMode] = useState(() => {
    if (typeof window !== 'undefined') {
      const savedMode = localStorage.getItem('darkMode');
      return savedMode ? JSON.parse(savedMode) : window.matchMedia('(prefers-color-scheme: dark)').matches;
    }
    return true; // Default to true if window is not defined (e.g., during SSR)
  });

  // THIS IS THE CRUCIAL EFFECT HOOK
  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    localStorage.setItem('darkMode', JSON.stringify(darkMode));
  }, [darkMode]);

  const toggleDarkMode = () => {
    setDarkMode((prev) => !prev);
  };

  return (
    // Make sure this div does NOT have the 'dark' class conditionally applied
    <div className="min-h-screen bg-white dark:bg-gray-900 transition-colors duration-200">
      <Navbar darkMode={darkMode} toggleDarkMode={toggleDarkMode} />
      <HomePage />
      <Footer darkMode={darkMode} toggleDarkMode={toggleDarkMode} />
    </div>
  );
}

export default App;


/* ==== FILE: src\components\AgentVanguardGame.jsx ==== */

// src/components/AgentVanguardGame.jsx
// Agent Vanguard: Glitch Dash - Health system updated to 10 max health
// Optimizations for reduced lag: particle system and drawing efficiency
// FIX: Agent starting position (now truly starts in the middle, boost applies after game starts)
// NEW: Implemented responsive scaling for mobile view
// FIX: Audio playback for mobile (unlocking audio context) - THIS IS THE APPLIED FIX
// NEW: Improved mobile screen utilization, fullscreen button, and **canvas centering**
// NEW: Enhanced dimension calculation for better landscape/portrait handling and larger desktop view
// NEW: Mobile portrait mode instruction to rotate device
// FIX: Bottom edge clipping in mobile landscape mode

import React, { useRef, useEffect, useState, useCallback } from 'react';

// --- Game Configuration Constants ---
const REFERENCE_GAME_WIDTH = 800; // Define the game's design width (used for internal scaling)
const GAME_ASPECT_RATIO = 16 / 9;
const REFERENCE_GAME_HEIGHT = REFERENCE_GAME_WIDTH / GAME_ASPECT_RATIO; // Calculate design height (approx 450)

// Maximum canvas size for non-fullscreen desktop view to prevent it from becoming absurdly large
const MAX_DESKTOP_CANVAS_WIDTH = 1200;

const AGENT_SIZE = 40; // Agent size (width of the chevron base)
const AGENT_X_POS = 100; // Fixed X position for agent

const GRAVITY = 0.1;
const JUMP_FORCE = -5;
const INITIAL_UPWARD_BOOST = -10;
const INITIAL_BOOST_DURATION = 40;

const BASE_GAME_SPEED = 2;
const MAX_GAME_SPEED = 6;
const SPEED_INCREASE_INTERVAL = 150;
const SPEED_INCREASE_AMOUNT = 0.1;

const OBSTACLE_WIDTH = 80;
const BASE_OBSTACLE_GAP_HEIGHT = 220;
const MIN_OBSTACLE_GAP_HEIGHT = 120;
const GAP_DECREASE_INTERVAL = 200;
const GAP_DECREASE_AMOUNT = 5;

const OBSTACLE_MIN_HEIGHT = 50;
const OBSTACLE_SPAWN_INTERVAL_BASE = 150;
const OBSTACLE_SPAWN_INTERVAL_MIN = 120;

const BALLOON_SPAWN_INTERVAL_BASE = 300;
const BALLOON_SPAWN_INTERVAL_MIN = 150;
const HEALTH_SPAWN_CHANCE = 0.20;
const SHIELD_SPAWN_CHANCE = 0.12;
const BUSTER_SPAWN_CHANCE = 0.08;

const BALLOON_SIZE = 30;
const BALLOON_VERTICAL_SPEED = 1;
const BALLOON_SPAWN_HORIZONTAL_OFFSET = 500;

const PICKUP_SIZE = 25;
const SHIELD_DURATION = 300;
const BUSTER_DURATION = 600;
const BUSTER_SHOT_SPEED = 15;

const DAMAGE_FLASH_DURATION = 15;

// --- Health Configuration ---
const INITIAL_HEALTH = 3;
const MAX_PLAYER_HEALTH = 10;

// --- Particle System Configuration (Optimized) ---
const MAX_PARTICLES = 100;
const PARTICLE_SPAWN_RATE = 2;
const PARTICLE_SIZE_RANGE = [3, 8];
const PARTICLE_ALPHA_DECAY = 0.04;
const PARTICLE_SHRINK_RATE = 0.95;

// --- Theming Colors (Keep as is) ---
const THEME_COLORS = {
    dark: {
        background: 'linear-gradient(to right, #2A0A4B, #4B1A7C)',
        containerBorder: '#9333ea',
        containerBoxShadow: 'rgba(147, 51, 234, 0.4)',
        heading: '#e9d5ff',
        scoreText: '#facc15',
        healthText: '#4ade80',
        canvasBorder: '#9333ea',
        canvasBoxShadow: 'rgba(147, 51, 234, 0.4)',
        instructionText: '#a1a1aa',
        gridLine: 'rgba(147, 51, 234, 0.15)',

        agentPrimary: '#FF4654',
        agentSecondary: '#FFD700',
        agentGlow: '#00D4FF',
        obstacle: '#00D4FF',
        obstacleGlow: '#FF4654',
        hostileBalloon: '#FF0000',
        hostileBalloonGlow: '#FFA500',
        healthPickup: '#00FF00',
        shieldPickup: '#00FFFF',
        busterPickup: '#FF00FF',
        shieldActiveGlow: 'rgba(0,255,255,0.7)',
        busterActiveGlow: 'rgba(255,0,255,0.7)',
        busterShot: '#FFFFFF',
        damageFlash: '#FFFFFF',
        trailParticle: 'rgba(0, 212, 255, 0.8)',
        thrustParticle: 'rgba(255, 200, 0, 0.9)',
        gameOverBg: 'rgba(0,0,0,0.7)',
        gameOverHeading: '#FF4654',
        gameOverScoreText: '#FFFFFF',
        tryAgainBtnBg: '#FF4654',
        tryAgainBtnBorder: '#00D4FF',
        fullscreenBtnBg: 'rgba(0,0,0,0.6)',
        fullscreenBtnText: '#FFF',
    },
    light: {
        background: 'linear-gradient(to right, #f3f4f6, #e5e7eb)',
        containerBorder: '#6d28d9',
        containerBoxShadow: 'rgba(109, 40, 217, 0.3)',
        heading: '#4c1d95',
        scoreText: '#ca8a04',
        healthText: '#16a34a',
        canvasBorder: '#6d28d9',
        canvasBoxShadow: 'rgba(109, 40, 217, 0.3)',
        instructionText: '#525252',
        gridLine: 'rgba(109, 40, 217, 0.1)',

        agentPrimary: '#DC2626',
        agentSecondary: '#FACC15',
        agentGlow: '#22D3EE',
        obstacle: '#22D3EE',
        obstacleGlow: '#DC2626',
        hostileBalloon: '#EF4444',
        hostileBalloonGlow: '#F97316',
        healthPickup: '#10B981',
        shieldPickup: '#06B6D4',
        busterPickup: '#EC4899',
        shieldActiveGlow: 'rgba(6,182,212,0.7)',
        busterActiveGlow: 'rgba(236,72,153,0.7)',
        busterShot: '#1F2937',
        damageFlash: '#DC2626',
        trailParticle: 'rgba(6, 182, 212, 0.8)',
        thrustParticle: 'rgba(251, 191, 36, 0.9)',
        gameOverBg: 'rgba(255,255,255,0.7)',
        gameOverHeading: '#DC2626',
        gameOverScoreText: '#1F2937',
        tryAgainBtnBg: '#DC2626',
        tryAgainBtnBorder: '#22D3EE',
        fullscreenBtnBg: 'rgba(255,255,255,0.6)',
        fullscreenBtnText: '#333',
    }
};

// --- Web Audio API Setup ---
// Use a single AudioContext instance for the whole application.
// This is created once when the module is loaded.
const audioContext = typeof window !== 'undefined' ? new (window.AudioContext || window.webkitAudioContext)() : null;

// Function to fetch and decode audio files into buffers
const loadAudioBuffer = async (url) => {
    if (!audioContext) return null;
    const response = await fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    return await audioContext.decodeAudioData(arrayBuffer);
};


// --- Main Game Component ---
export default function AgentVanguardGame({ theme = 'dark' }) {
    const canvasRef = useRef(null);
    const gameContainerRef = useRef(null); // Ref for the main game container div
    const animationFrameId = useRef(null); // Reference to store RAF ID

    // --- Web Audio API Integration ---
    const audioBuffers = useRef({}); // To store decoded audio data
    const audioLoaded = useRef(false); // To track if audio has been loaded

    // New function with volume control
    const playSound = useCallback((bufferName, volume = 1.0) => {
        if (!audioContext || audioContext.state !== 'running' || !audioBuffers.current[bufferName]) {
            return;
        }
        // Create a Gain Node (volume control)
        const gainNode = audioContext.createGain();
        gainNode.gain.setValueAtTime(volume, audioContext.currentTime);

        const source = audioContext.createBufferSource();
        source.buffer = audioBuffers.current[bufferName];

        // Connect the source to the Gain Node, and the Gain Node to the speakers
        source.connect(gainNode);
        gainNode.connect(audioContext.destination);

        source.start(0);
    }, []);


    const unlockAndLoadAudio = useCallback(async () => {
        if (!audioContext || audioLoaded.current) return;
        if (audioContext.state === 'suspended') {
            await audioContext.resume();
        }
        try {
            console.log("Attempting to load audio assets...");
            const audioFiles = [
                { name: 'jump', path: '/audio/jump.wav' },
                { name: 'pickup', path: '/audio/pickup.wav' },
                { name: 'hit', path: '/audio/hit.wav' },
                { name: 'gameOver', path: '/audio/gameover.wav' },
                { name: 'busterActivate', path: '/audio/buster_activate.wav' },
                { name: 'busterShot', path: '/audio/buster_shot.wav' },
            ];
            const loadPromises = audioFiles.map(async (file) => {
                try {
                    audioBuffers.current[file.name] = await loadAudioBuffer(file.path);
                    console.log(`Successfully loaded ${file.name}.wav`);
                } catch (e) {
                    console.error(`Error loading ${file.name}.wav:`, e);
                    // Optionally, set a flag or use a fallback sound if a critical sound fails
                }
            });
            await Promise.all(loadPromises);
            audioLoaded.current = true;
            console.log("All audio loading attempts completed.");
            // Remove event listeners after successful unlock and loading
            document.removeEventListener('keydown', unlockAndLoadAudio);
            document.removeEventListener('mousedown', unlockAndLoadAudio);
            document.removeEventListener('touchstart', unlockAndLoadAudio);
        } catch (e) {
            console.error('Unexpected error during audio loading process:', e);
        }
    }, []);

    // Derive current colors based on theme prop
    const currentThemeColors = THEME_COLORS[theme];

    // Mutable game state managed directly by the game loop
    const gameState = useRef({
        agentY: 0,
        agentVelocity: 0,
        obstacles: [],
        projectiles: [],
        score: 0,
        frameCount: 0,
        isGameOver: false,
        isGameRunning: false,
        backgroundOffset: 0,
        trailParticles: [],
        initialBoostTimer: 0,
        currentSpeed: BASE_GAME_SPEED,
        currentGapHeight: BASE_OBSTACLE_GAP_HEIGHT,

        health: INITIAL_HEALTH,
        maxHealth: MAX_PLAYER_HEALTH,
        shieldActive: false,
        shieldTimer: 0,
        busterActive: false,
        busterTimer: 0,
        lastBalloonFrame: 0,
        damageFlashTimer: 0,
        damageText: null,
    });

    // React state for rendering UI elements (score, game over screen, health display)
    const [currentScore, setCurrentScore] = useState(0);
    const [isGameOverScreen, setIsGameOverScreen] = useState(false);
    const [isGameStarted, setIsGameStarted] = useState(false);
    const [canvasDimensions, setCanvasDimensions] = useState({ width: 0, height: 0 });
    const [playerHealth, setPlayerHealth] = useState(INITIAL_HEALTH);
    const [isGameFullscreen, setIsGameFullscreen] = useState(false);
    const [isMobilePortrait, setIsMobilePortrait] = useState(false); // New state for mobile portrait detection

    // --- Canvas Sizing (Responsive) ---
    const updateCanvasDimensions = useCallback(() => {
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;

        let newWidth;
        let newHeight;

        // Determine if we are on a mobile-like screen in portrait orientation
        const isCurrentlyMobilePortrait = windowWidth < 768 && windowWidth < windowHeight;
        setIsMobilePortrait(isCurrentlyMobilePortrait);

        // Calculate dimensions maintaining aspect ratio.
        // Adjust buffer percentages based on orientation to account for browser UI.
        const widthBuffer = 0.95; // More generous for width
        const heightBufferPortrait = 0.85; // Less generous for height in portrait (more browser UI space)
        const heightBufferLandscape = 0.8; // Even less generous for height in landscape (potential larger nav/address bars)

        const effectiveHeightBuffer = isCurrentlyMobilePortrait ? heightBufferPortrait : heightBufferLandscape;


        const targetWidthByHeight = windowHeight * effectiveHeightBuffer * GAME_ASPECT_RATIO;
        const targetHeightByWidth = windowWidth * widthBuffer / GAME_ASPECT_RATIO;

        if (targetWidthByHeight <= windowWidth * widthBuffer) {
            // Screen is wider relative to game aspect ratio (e.g., landscape desktop/mobile)
            // Fit based on height, ensuring it doesn't exceed screen width
            newHeight = windowHeight * effectiveHeightBuffer;
            newWidth = newHeight * GAME_ASPECT_RATIO;
        } else {
            // Screen is taller relative to game aspect ratio (e.g., portrait mobile)
            // Fit based on width
            newWidth = windowWidth * widthBuffer;
            newHeight = newWidth / GAME_ASPECT_RATIO;
        }

        // Apply a global maximum width for non-fullscreen mode
        if (!isGameFullscreen && newWidth > MAX_DESKTOP_CANVAS_WIDTH) {
            newWidth = MAX_DESKTOP_CANVAS_WIDTH;
            newHeight = newWidth / GAME_ASPECT_RATIO;
        }

        // Ensure newWidth and newHeight are at least a minimum sensible size
        const MIN_CANVAS_WIDTH = 320;
        const MIN_CANVAS_HEIGHT = MIN_CANVAS_WIDTH / GAME_ASPECT_RATIO;
        newWidth = Math.max(newWidth, MIN_CANVAS_WIDTH);
        newHeight = Math.max(newHeight, MIN_CANVAS_HEIGHT);

        setCanvasDimensions({ width: newWidth, height: newHeight });

        // Initialize agent Y position based on new canvas height
        gameState.current.agentY = newHeight / 2;
    }, [isGameFullscreen]); // Add isGameFullscreen to dependencies

    useEffect(() => {
        updateCanvasDimensions();
        window.addEventListener('resize', updateCanvasDimensions);

        // Listen for fullscreen change event
        const handleFullscreenChange = () => {
            const isCurrentlyFullscreen = !!document.fullscreenElement;
            setIsGameFullscreen(isCurrentlyFullscreen);
            if (!isCurrentlyFullscreen) {
                setTimeout(updateCanvasDimensions, 50); // Small delay to ensure window dimensions are updated
            }
        };
        document.addEventListener('fullscreenchange', handleFullscreenChange);
        document.addEventListener('webkitfullscreenchange', handleFullscreenChange); // For Safari
        document.addEventListener('mozfullscreenchange', handleFullscreenChange); // For Firefox
        document.addEventListener('MSFullscreenChange', handleFullscreenChange); // For IE/Edge

        return () => {
            window.removeEventListener('resize', updateCanvasDimensions);
            document.removeEventListener('fullscreenchange', handleFullscreenChange);
            document.removeEventListener('webkitfullscreenchange', handleFullscreenChange);
            document.removeEventListener('mozfullscreenchange', handleFullscreenChange);
            document.removeEventListener('MSFullscreenChange', handleFullscreenChange);
        };
    }, [updateCanvasDimensions]);

    // Add initial event listeners to unlock and load audio on any user interaction
    useEffect(() => {
        if (audioContext) {
            document.addEventListener('keydown', unlockAndLoadAudio, { once: true });
            document.addEventListener('mousedown', unlockAndLoadAudio, { once: true });
            document.addEventListener('touchstart', unlockAndLoadAudio, { once: true });

            return () => {
                document.removeEventListener('keydown', unlockAndLoadAudio);
                document.removeEventListener('mousedown', unlockAndLoadAudio);
                document.removeEventListener('touchstart', unlockAndLoadAudio);
            };
        }
    }, [unlockAndLoadAudio]); // Dependency on our useCallback function

    // Helper for random number
    const rand = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

    // --- Game Loop (Physics and Logic) ---
    const gameLoop = useCallback(() => {
        const canvas = canvasRef.current;
        if (!canvas) return;

        const ctx = canvas.getContext('2d');

        // Calculate scaling factor based on current canvas size and reference size
        const scaleX = canvas.width / REFERENCE_GAME_WIDTH;
        const scaleY = canvas.height / REFERENCE_GAME_HEIGHT;
        const effectiveScale = Math.min(scaleX, scaleY); // Use the smaller scale to maintain aspect ratio

        // Apply scaling to game constants that define sizes/positions
        const scaledAgentSize = AGENT_SIZE * effectiveScale;
        const scaledAgentXPos = AGENT_X_POS * effectiveScale;
        const scaledObstacleWidth = OBSTACLE_WIDTH * effectiveScale;
        const scaledBaseObstacleGapHeight = BASE_OBSTACLE_GAP_HEIGHT * effectiveScale;
        const scaledMinObstacleGapHeight = MIN_OBSTACLE_GAP_HEIGHT * effectiveScale;
        const scaledObstacleMinHeight = OBSTACLE_MIN_HEIGHT * effectiveScale;
        const scaledBalloonSize = BALLOON_SIZE * effectiveScale;
        const scaledPickupSize = PICKUP_SIZE * effectiveScale;

        // Scale speeds and forces
        const scaledGravity = GRAVITY * effectiveScale;
        const scaledJumpForce = JUMP_FORCE * effectiveScale;
        const scaledInitialUpwardBoost = INITIAL_UPWARD_BOOST * effectiveScale;
        const scaledBaseGameSpeed = BASE_GAME_SPEED * effectiveScale;
        const scaledMaxGameSpeed = MAX_GAME_SPEED * effectiveScale;
        const scaledSpeedIncreaseAmount = SPEED_INCREASE_AMOUNT * effectiveScale;
        const scaledBalloonVerticalSpeed = BALLOON_VERTICAL_SPEED * effectiveScale;
        const scaledBusterShotSpeed = BUSTER_SHOT_SPEED * effectiveScale;

        // If game is over, we don't update physics/logic, but we do draw the final state
        if (gameState.current.isGameOver) {
            drawGame(ctx, canvas, currentThemeColors, effectiveScale, scaledAgentSize, scaledAgentXPos);
            return;
        }

        // If game is not running (e.g., initial start screen or after reset), just draw it
        if (!gameState.current.isGameRunning) {
            drawGame(ctx, canvas, currentThemeColors, effectiveScale, scaledAgentSize, scaledAgentXPos);
            animationFrameId.current = requestAnimationFrame(gameLoop);
            return;
        }

        // 1. Update Agent Physics
        if (gameState.current.initialBoostTimer > 0) {
            gameState.current.agentVelocity = scaledInitialUpwardBoost * (gameState.current.initialBoostTimer / INITIAL_BOOST_DURATION);
            gameState.current.initialBoostTimer--;
        } else {
            gameState.current.agentVelocity += scaledGravity;
        }
        gameState.current.agentY += gameState.current.agentVelocity;

        // Boundary checks for agent (use scaled values)
        if (gameState.current.agentY < scaledAgentSize / 2) {
            gameState.current.agentY = scaledAgentSize / 2;
            gameState.current.agentVelocity = 0;
        }
        if (gameState.current.agentY > canvas.height - scaledAgentSize / 2) {
            gameState.current.agentY = canvas.height - scaledAgentSize / 2;
            if (!gameState.current.shieldActive) {
                gameState.current.health--;
                setPlayerHealth(gameState.current.health);
                gameState.current.damageFlashTimer = DAMAGE_FLASH_DURATION;
                gameState.current.damageText = { x: scaledAgentXPos, y: gameState.current.agentY - scaledAgentSize, text: '-1 HP', alpha: 1, vy: -1 * effectiveScale };
                playSound('hit');
            }
            if (gameState.current.health <= 0) {
                gameState.current.isGameOver = true;
                setIsGameOverScreen(true);
                playSound('gameOver');
            }
            if (gameState.current.isGameOver) return;
        }

        // Update shield timer
        if (gameState.current.shieldActive) {
            gameState.current.shieldTimer--;
            if (gameState.current.shieldTimer <= 0) {
                gameState.current.shieldActive = false;
            }
        }

        // Update buster timer and trigger shots
        if (gameState.current.busterActive) {
            gameState.current.busterTimer--;
            if (gameState.current.busterTimer <= 0) {
                gameState.current.busterActive = false;
            } else {
                const hostileBalloons = gameState.current.obstacles.filter(o => o.type === 'balloon');
                if (hostileBalloons.length > 0) {
                    if (gameState.current.projectiles.length < 1 && gameState.current.frameCount % 5 === 0) {
                        const targetBalloon = hostileBalloons[0];
                        gameState.current.projectiles.push({
                            x: scaledAgentXPos + scaledAgentSize / 2,
                            y: gameState.current.agentY,
                            targetX: targetBalloon.x,
                            targetY: targetBalloon.y,
                            type: 'buster_shot',
                            size: 5 * effectiveScale,
                            hit: false,
                        });
                        playSound('busterShot');
                    }
                }
            }
        }

        // Update projectile movement and collision with balloons
        for (let i = gameState.current.projectiles.length - 1; i >= 0; i--) {
            const p = gameState.current.projectiles[i];
            if (p.hit) {
                gameState.current.projectiles.splice(i, 1);
                continue;
            }

            const dx = p.targetX - p.x;
            const dy = p.targetY - p.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance > scaledBusterShotSpeed) {
                p.x += (dx / distance) * scaledBusterShotSpeed;
                p.y += (dy / distance) * scaledBusterShotSpeed;
            } else {
                p.x = p.targetX;
                p.y = p.targetY;
                p.hit = true;

                const targetBalloonIndex = gameState.current.obstacles.findIndex(
                    o => o.type === 'balloon' && Math.abs(o.x - p.targetX) < (scaledBusterShotSpeed + scaledBalloonSize / 2) && Math.abs(o.y - p.targetY) < (scaledBusterShotSpeed + scaledBalloonSize / 2)
                );
                if (targetBalloonIndex !== -1) {
                    gameState.current.obstacles.splice(targetBalloonIndex, 1);
                }
            }

            if (p.x > canvas.width + 10 || p.x < -10 || p.y > canvas.height + 10 || p.y < -10) {
                gameState.current.projectiles.splice(i, 1);
            }
        }
        // Update damage flash timer
        if (gameState.current.damageFlashTimer > 0) {
            gameState.current.damageFlashTimer--;
        }

        // Update damage text animation
        if (gameState.current.damageText) {
            gameState.current.damageText.y += gameState.current.damageText.vy;
            gameState.current.damageText.alpha -= 0.02;
            if (gameState.current.damageText.alpha <= 0) {
                gameState.current.damageText = null;
            }
        }
        // 2. Update Obstacles and Collision Detection
        gameState.current.frameCount++;

        // Scaling for obstacle spawn interval based on scaled speed
        const currentWallSpawnInterval = Math.max(OBSTACLE_SPAWN_INTERVAL_MIN,
            OBSTACLE_SPAWN_INTERVAL_BASE - (gameState.current.currentSpeed / effectiveScale - BASE_GAME_SPEED) * 50);

        if (gameState.current.frameCount % Math.floor(currentWallSpawnInterval) === 0) {
            const topHeight = rand(scaledObstacleMinHeight, canvas.height - gameState.current.currentGapHeight - scaledObstacleMinHeight);
            gameState.current.obstacles.push({
                x: canvas.width,
                type: 'wall',
                topHeight: topHeight,
                bottomHeight: canvas.height - (topHeight + gameState.current.currentGapHeight),
                scored: false,
            });

            // Pickup spawn position also needs to be relative to canvas
            const pickupSpawnX = canvas.width + rand(50 * effectiveScale, 200 * effectiveScale);
            const pickupSpawnY = rand(scaledPickupSize, canvas.height - scaledPickupSize);

            const randomPickupChance = Math.random();
            if (randomPickupChance < HEALTH_SPAWN_CHANCE) {
                gameState.current.obstacles.push({ x: pickupSpawnX, y: pickupSpawnY, type: 'health', collected: false, size: scaledPickupSize });
            } else if (randomPickupChance < HEALTH_SPAWN_CHANCE + SHIELD_SPAWN_CHANCE) {
                gameState.current.obstacles.push({ x: pickupSpawnX, y: pickupSpawnY, type: 'shield', collected: false, size: scaledPickupSize });
            } else if (randomPickupChance < HEALTH_SPAWN_CHANCE + SHIELD_SPAWN_CHANCE + BUSTER_SPAWN_CHANCE) {
                gameState.current.obstacles.push({ x: pickupSpawnX, y: pickupSpawnY, type: 'buster', collected: false, size: scaledPickupSize });
            }
        }

        const currentBalloonSpawnInterval = Math.max(BALLOON_SPAWN_INTERVAL_MIN,
            BALLOON_SPAWN_INTERVAL_BASE - (gameState.current.currentSpeed / effectiveScale - BASE_GAME_SPEED) * 50);

        if (gameState.current.frameCount - gameState.current.lastBalloonFrame > currentBalloonSpawnInterval) {
            const spawnDirection = Math.random() < 0.5 ? 'bottom-to-top' : 'top-to-bottom';
            const initialY = spawnDirection === 'bottom-to-top' ? canvas.height + scaledBalloonSize : -scaledBalloonSize;
            const targetY = spawnDirection === 'bottom-to-top' ? -scaledBalloonSize : canvas.height + scaledBalloonSize;
            const xPos = rand(scaledAgentXPos + 100 * effectiveScale, canvas.width + BALLOON_SPAWN_HORIZONTAL_OFFSET * effectiveScale);

            gameState.current.obstacles.push({
                x: xPos,
                y: initialY,
                type: 'balloon',
                spawnDirection: spawnDirection,
                size: scaledBalloonSize,
            });
            gameState.current.lastBalloonFrame = gameState.current.frameCount;
        }
        for (let i = gameState.current.obstacles.length - 1; i >= 0; i--) {
            const obstacle = gameState.current.obstacles[i];
            obstacle.x -= gameState.current.currentSpeed;

            if (obstacle.type === 'balloon') {
                if (obstacle.spawnDirection === 'bottom-to-top') {
                    obstacle.y -= scaledBalloonVerticalSpeed;
                } else {
                    obstacle.y += scaledBalloonVerticalSpeed;
                }
            }

            // Collision detection uses scaled values
            const agentLeft = scaledAgentXPos - scaledAgentSize / 2;
            const agentRight = scaledAgentXPos + scaledAgentSize / 2;
            const agentTop = gameState.current.agentY - scaledAgentSize / 2;
            const agentBottom = gameState.current.agentY + scaledAgentSize / 2;

            let collided = false;
            let isDangerous = false;

            if (obstacle.type === 'wall') {
                isDangerous = true;
                const obstacleLeft = obstacle.x;
                const obstacleRight = obstacle.x + scaledObstacleWidth;
                const obstacleTopGap = obstacle.topHeight;
                const obstacleBottomGap = canvas.height - obstacle.bottomHeight;

                if (agentRight > obstacleLeft && agentLeft < obstacleRight) {
                    if (agentTop < obstacleTopGap || agentBottom > obstacleBottomGap) {
                        collided = true;
                    }
                }
            } else if (obstacle.type === 'balloon') {
                isDangerous = true;
                const balloonLeft = obstacle.x - obstacle.size / 2;
                const balloonRight = obstacle.x + obstacle.size / 2;
                const balloonTop = obstacle.y - obstacle.size / 2;
                const balloonBottom = obstacle.y + obstacle.size / 2;

                if (agentRight > balloonLeft && agentLeft < balloonRight &&
                    agentBottom > balloonTop && agentTop < balloonBottom) {
                    collided = true;
                }
            } else if (obstacle.type === 'health' || obstacle.type === 'shield' || obstacle.type === 'buster') {
                const pickupLeft = obstacle.x - obstacle.size / 2;
                const pickupRight = obstacle.x + obstacle.size / 2;
                const pickupTop = obstacle.y - obstacle.size / 2;
                const pickupBottom = obstacle.y + obstacle.size / 2;

                if (agentRight > pickupLeft && agentLeft < pickupRight &&
                    agentBottom > pickupTop && agentTop < pickupBottom) {

                    if (!obstacle.collected) {
                        obstacle.collected = true;
                        playSound('pickup');
                        if (obstacle.type === 'health') {
                            if (gameState.current.health < gameState.current.maxHealth) {
                                gameState.current.health = Math.min(gameState.current.health + 1, gameState.current.maxHealth);
                                setPlayerHealth(gameState.current.health);
                            }
                        } else if (obstacle.type === 'shield') {
                            gameState.current.shieldActive = true;
                            gameState.current.shieldTimer = SHIELD_DURATION;
                        } else if (obstacle.type === 'buster') {
                            gameState.current.busterActive = true;
                            gameState.current.busterTimer = BUSTER_DURATION;
                            playSound('busterActivate');
                        }
                    }
                }
            }

            if (collided && isDangerous) {
                if (!gameState.current.shieldActive) {
                    gameState.current.health--;
                    setPlayerHealth(gameState.current.health);
                    gameState.current.damageFlashTimer = DAMAGE_FLASH_DURATION;
                    gameState.current.damageText = { x: scaledAgentXPos, y: gameState.current.agentY - scaledAgentSize, text: '-1 HP', alpha: 1, vy: -1 * effectiveScale };
                    playSound('hit');
                }
                gameState.current.obstacles.splice(i, 1);
                if (gameState.current.health <= 0) {
                    gameState.current.isGameOver = true;
                    setIsGameOverScreen(true);
                    playSound('gameOver');
                    return;
                }
            }

            if (obstacle.type === 'wall' && !obstacle.scored && agentLeft > obstacle.x + scaledObstacleWidth) {
                obstacle.scored = true;
                gameState.current.score++;
                setCurrentScore(gameState.current.score);

                if (gameState.current.score % SPEED_INCREASE_INTERVAL === 0 && gameState.current.currentSpeed < scaledMaxGameSpeed) {
                    gameState.current.currentSpeed = Math.min(scaledMaxGameSpeed, gameState.current.currentSpeed + scaledSpeedIncreaseAmount);
                }
                if (gameState.current.score % GAP_DECREASE_INTERVAL === 0 && gameState.current.currentGapHeight > scaledMinObstacleGapHeight) {
                    gameState.current.currentGapHeight = Math.max(scaledMinObstacleGapHeight, gameState.current.currentGapHeight - GAP_DECREASE_AMOUNT * effectiveScale);
                }
            }

            const obstacleOffScreen = obstacle.x + (obstacle.size || scaledObstacleWidth) < 0;
            let balloonPastScreen = false;
            if (obstacle.type === 'balloon') {
                balloonPastScreen = (obstacle.spawnDirection === 'bottom-to-top' && obstacle.y < -scaledBalloonSize) ||
                    (obstacle.spawnDirection === 'top-to-bottom' && obstacle.y > canvas.height + scaledBalloonSize);
            }

            if (obstacleOffScreen || obstacle.collected || balloonPastScreen) {
                gameState.current.obstacles.splice(i, 1);
            }
        }

        // Update background offset for subtle scrolling effect of the grid
        gameState.current.backgroundOffset = (gameState.current.backgroundOffset - 0.2 * effectiveScale) % canvas.width;

        // Add trail particle (optimized to limit total particles)
        if (gameState.current.trailParticles.length < MAX_PARTICLES) {
            for (let j = 0; j < PARTICLE_SPAWN_RATE; j++) {
                gameState.current.trailParticles.push({
                    x: scaledAgentXPos - scaledAgentSize * 0.4,
                    y: gameState.current.agentY + rand(-scaledAgentSize / 4, scaledAgentSize / 4),
                    size: rand(PARTICLE_SIZE_RANGE[0], PARTICLE_SIZE_RANGE[1]) * effectiveScale,
                    alpha: 1,
                    vy: rand(-2, 2) * effectiveScale,
                    vx: -gameState.current.currentSpeed * 0.2,
                });
            }
        }

        // Update and remove old particles
        for (let i = gameState.current.trailParticles.length - 1; i >= 0; i--) {
            const p = gameState.current.trailParticles[i];
            p.x += p.vx;
            p.y += p.vy;
            p.alpha -= PARTICLE_ALPHA_DECAY;
            p.size *= PARTICLE_SHRINK_RATE;
            if (p.alpha <= 0.1 || p.size <= 1 * effectiveScale) {
                gameState.current.trailParticles.splice(i, 1);
            }
        }

        drawGame(ctx, canvas, currentThemeColors, effectiveScale, scaledAgentSize, scaledAgentXPos);

        animationFrameId.current = requestAnimationFrame(gameLoop);

    }, [canvasDimensions, currentThemeColors, isGameFullscreen, playSound, unlockAndLoadAudio]); // Added playSound and unlockAndLoadAudio dependencies

    // --- Drawing Function (Uses current state from gameState.current) ---
    const drawGame = (ctx, canvas, colors, scale, scaledAgentSize, scaledAgentXPos) => {
        const hue = (gameState.current.frameCount * 0.5) % 360;
        const agentHue = (gameState.current.frameCount * 1.5) % 360;

        const dynamicObstacleColor = `hsl(${hue}, 100%, 50%)`;
        const dynamicObstacleGlowColor = `hsl(${(hue + 180) % 360}, 100%, 50%)`;

        let currentAgentPrimaryColor = `hsl(${agentHue}, 100%, 60%)`;
        let currentAgentGlowColor = `hsl(${(agentHue + 90) % 360}, 100%, 60%)`;
        if (gameState.current.damageFlashTimer > 0) {
            currentAgentPrimaryColor = colors.damageFlash;
            currentAgentGlowColor = colors.damageFlash;
        }

        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        // Canvas background
        if (colors.background.startsWith('linear-gradient')) {
            const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
            const colorMatches = colors.background.match(/rgb\(\d+,\s*\d+,\s*\d+\)|#[0-9a-fA-F]{6}|#[0-9a-fA-F]{3}/g);
            if (colorMatches && colorMatches.length >= 2) {
                gradient.addColorStop(0, colorMatches[0]);
                gradient.addColorStop(1, colorMatches[colorMatches.length - 1]);
            } else {
                gradient.addColorStop(0, colors.background);
                gradient.addColorStop(1, colors.background);
            }
            ctx.fillStyle = gradient;
        } else {
            ctx.fillStyle = colors.background;
        }
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // Grid pattern
        ctx.strokeStyle = colors.gridLine;
        ctx.lineWidth = 1 * scale;
        const gridSize = 80 * scale;

        ctx.beginPath();
        for (let x = -gridSize; x < canvas.width + gridSize; x += gridSize) {
            const offsetX = (x + gameState.current.backgroundOffset) % gridSize;
            ctx.moveTo(x + offsetX, 0);
            ctx.lineTo(x + offsetX, canvas.height);
        }
        for (let y = -gridSize; y < canvas.height + gridSize; y += gridSize) {
            const offsetY = (y + gameState.current.backgroundOffset) % gridSize;
            ctx.moveTo(0, y + offsetY);
            ctx.lineTo(canvas.width, y + offsetY);
        }
        ctx.stroke();

        // Draw Trail Particles
        for (const p of gameState.current.trailParticles) {
            ctx.fillStyle = `${colors.trailParticle.substring(0, colors.trailParticle.lastIndexOf(','))}, ${p.alpha})`;
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.size / 2, 0, Math.PI * 2);
            ctx.fill();
        }

        // Draw Agent
        ctx.save();
        ctx.translate(scaledAgentXPos, gameState.current.agentY);
        const rotationAngle = gameState.current.agentVelocity * 0.08;
        ctx.rotate(rotationAngle);

        ctx.fillStyle = currentAgentPrimaryColor;
        ctx.beginPath();
        ctx.moveTo(-scaledAgentSize * 0.6, -scaledAgentSize / 2);
        ctx.lineTo(scaledAgentSize * 0.6, 0);
        ctx.lineTo(-scaledAgentSize * 0.6, scaledAgentSize / 2);
        ctx.closePath();
        ctx.fill();

        ctx.fillStyle = colors.agentSecondary;
        ctx.beginPath();
        ctx.moveTo(-scaledAgentSize * 0.4, -scaledAgentSize / 3);
        ctx.lineTo(scaledAgentSize * 0.4, 0);
        ctx.lineTo(-scaledAgentSize * 0.4, scaledAgentSize / 3);
        ctx.closePath();
        ctx.fill();

        ctx.shadowColor = currentAgentGlowColor;
        ctx.shadowBlur = 20 * scale;
        ctx.fill();
        ctx.shadowBlur = 0;

        if (gameState.current.agentVelocity < 0) {
            ctx.fillStyle = colors.thrustParticle;
            ctx.shadowColor = colors.thrustParticle;
            ctx.shadowBlur = 8 * scale;
            ctx.beginPath();
            ctx.moveTo(-scaledAgentSize * 0.6, -scaledAgentSize / 4);
            ctx.lineTo(-scaledAgentSize * 0.6 - 20 * scale * (gameState.current.agentVelocity / (JUMP_FORCE * scale)), 0);
            ctx.lineTo(-scaledAgentSize * 0.6, scaledAgentSize / 4);
            ctx.closePath();
            ctx.fill();
            ctx.shadowBlur = 0;
        }

        ctx.restore();

        // Draw active shield effect
        if (gameState.current.shieldActive) {
            ctx.beginPath();
            const pulse = Math.sin(gameState.current.frameCount * 0.1) * 0.1 + 1;
            ctx.arc(scaledAgentXPos, gameState.current.agentY, scaledAgentSize * 1.2 * pulse, 0, Math.PI * 2);
            ctx.strokeStyle = colors.shieldActiveGlow;
            ctx.lineWidth = 5 * scale;
            ctx.shadowColor = colors.shieldActiveGlow;
            ctx.shadowBlur = 15 * scale;
            ctx.stroke();
            ctx.shadowBlur = 0;
        }
        // Draw active buster effect
        if (gameState.current.busterActive) {
            ctx.beginPath();
            const pulse = Math.sin(gameState.current.frameCount * 0.15) * 0.1 + 1;
            ctx.arc(scaledAgentXPos, gameState.current.agentY, scaledAgentSize * 1.3 * pulse, 0, Math.PI * 2);
            ctx.strokeStyle = colors.busterActiveGlow;
            ctx.lineWidth = 4 * scale;
            ctx.shadowColor = colors.busterActiveGlow;
            ctx.shadowBlur = 12 * scale;
            ctx.stroke();
            ctx.shadowBlur = 0;
        }

        // Draw Obstacles
        for (const obstacle of gameState.current.obstacles) {
            const scaledObstacleWidth = OBSTACLE_WIDTH * scale;
            const scaledBalloonSize = BALLOON_SIZE * scale;
            const scaledPickupSize = PICKUP_SIZE * scale;

            if (obstacle.type === 'wall') {
                ctx.fillStyle = dynamicObstacleColor;
                ctx.fillRect(obstacle.x, 0, scaledObstacleWidth, obstacle.topHeight);
                ctx.fillRect(obstacle.x, canvas.height - obstacle.bottomHeight, scaledObstacleWidth, obstacle.bottomHeight);

                ctx.shadowColor = dynamicObstacleGlowColor;
                ctx.shadowBlur = 10 * scale;
                ctx.strokeStyle = dynamicObstacleColor;
                ctx.lineWidth = 3 * scale;
                ctx.strokeRect(obstacle.x, 0, scaledObstacleWidth, obstacle.topHeight);
                ctx.strokeRect(obstacle.x, canvas.height - obstacle.bottomHeight, scaledObstacleWidth, obstacle.bottomHeight);
                ctx.shadowBlur = 0;
            } else if (obstacle.type === 'balloon') {
                ctx.fillStyle = colors.hostileBalloon;
                ctx.beginPath();
                ctx.arc(obstacle.x, obstacle.y, scaledBalloonSize / 2, 0, Math.PI * 2);
                ctx.fill();

                ctx.strokeStyle = colors.hostileBalloonGlow;
                ctx.lineWidth = 2 * scale;
                const spikeCount = 8;
                for (let i = 0; i < spikeCount; i++) {
                    const angle = (i / spikeCount) * Math.PI * 2;
                    const innerX = obstacle.x + (scaledBalloonSize / 2) * Math.cos(angle);
                    const innerY = obstacle.y + (scaledBalloonSize / 2) * Math.sin(angle);
                    const outerX = obstacle.x + (scaledBalloonSize / 2 + 10 * scale) * Math.cos(angle);
                    const outerY = obstacle.y + (scaledBalloonSize / 2 + 10 * scale) * Math.sin(angle);
                    ctx.beginPath();
                    ctx.moveTo(innerX, innerY);
                    ctx.lineTo(outerX, outerY);
                    ctx.stroke();
                }

                ctx.shadowColor = colors.hostileBalloonGlow;
                ctx.shadowBlur = 8 * scale;
                ctx.beginPath();
                ctx.arc(obstacle.x, obstacle.y, scaledBalloonSize / 2, 0, Math.PI * 2);
                ctx.stroke();
                ctx.shadowBlur = 0;
            } else if (obstacle.type === 'health') {
                ctx.fillStyle = colors.healthPickup;
                const heartSize = scaledPickupSize * 0.8;
                ctx.beginPath();
                ctx.moveTo(obstacle.x, obstacle.y + heartSize * 0.3);
                ctx.bezierCurveTo(
                    obstacle.x + heartSize * 0.5, obstacle.y - heartSize * 0.4,
                    obstacle.x + heartSize * 0.8, obstacle.y + heartSize * 0.1,
                    obstacle.x, obstacle.y + heartSize * 0.7
                );
                ctx.bezierCurveTo(
                    obstacle.x - heartSize * 0.8, obstacle.y + heartSize * 0.1,
                    obstacle.x - heartSize * 0.5, obstacle.y - heartSize * 0.4,
                    obstacle.x, obstacle.y + heartSize * 0.3
                );
                ctx.closePath();
                ctx.fill();
                ctx.shadowColor = colors.healthPickup;
                ctx.shadowBlur = 8 * scale;
                ctx.fill();
                ctx.shadowBlur = 0;
            } else if (obstacle.type === 'shield') {
                ctx.fillStyle = colors.shieldPickup;
                const shieldSize = scaledPickupSize;
                ctx.beginPath();
                ctx.moveTo(obstacle.x, obstacle.y - shieldSize * 0.5);
                ctx.lineTo(obstacle.x + shieldSize * 0.5, obstacle.y - shieldSize * 0.2);
                ctx.lineTo(obstacle.x + shieldSize * 0.5, obstacle.y + shieldSize * 0.5);
                ctx.lineTo(obstacle.x, obstacle.y + shieldSize * 0.6);
                ctx.lineTo(obstacle.x - shieldSize * 0.5, obstacle.y + shieldSize * 0.5);
                ctx.lineTo(obstacle.x - shieldSize * 0.5, obstacle.y - shieldSize * 0.2);
                ctx.closePath();
                ctx.fill();

                ctx.shadowColor = colors.shieldPickup;
                ctx.shadowBlur = 8 * scale;
                ctx.fill();
                ctx.shadowBlur = 0;
            } else if (obstacle.type === 'buster') {
                ctx.fillStyle = colors.busterPickup;
                const busterSize = scaledPickupSize;
                ctx.beginPath();
                ctx.arc(obstacle.x, obstacle.y, busterSize / 2, 0, Math.PI * 2);
                ctx.fill();
                ctx.strokeStyle = colors.busterShot;
                ctx.lineWidth = 2 * scale;
                ctx.beginPath();
                ctx.moveTo(obstacle.x - busterSize / 2, obstacle.y);
                ctx.lineTo(obstacle.x + busterSize / 2, obstacle.y);
                ctx.moveTo(obstacle.x, obstacle.y - busterSize / 2);
                ctx.lineTo(obstacle.x, obstacle.y + busterSize / 2);
                ctx.stroke();

                ctx.shadowColor = colors.busterPickup;
                ctx.shadowBlur = 8 * scale;
                ctx.fill();
                ctx.shadowBlur = 0;
            }
        }

        // Draw Projectiles
        for (const projectile of gameState.current.projectiles) {
            if (!projectile.hit) {
                ctx.fillStyle = colors.busterShot;
                ctx.beginPath();
                ctx.arc(projectile.x, projectile.y, projectile.size / 2, 0, Math.PI * 2);
                ctx.fill();
                ctx.shadowColor = colors.busterShot;
                ctx.shadowBlur = 3 * scale;
                ctx.fill();
                ctx.shadowBlur = 0;
            }
        }
        // Draw floating damage text
        if (gameState.current.damageText) {
            ctx.fillStyle = `rgba(255, 255, 255, ${gameState.current.damageText.alpha})`;
            ctx.font = `bold ${20 * scale}px Orbitron, Arial`;
            ctx.textAlign = 'center';
            ctx.fillText(gameState.current.damageText.text, gameState.current.damageText.x, gameState.current.damageText.y);
        }
        // Draw Game Over overlay
        if (gameState.current.isGameOver) {
            ctx.fillStyle = colors.gameOverBg;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = colors.gameOverHeading;
            ctx.font = `bold ${48 * scale}px Orbitron, Arial`;
            ctx.textAlign = 'center';
            ctx.fillText('MISSION FAILED!', canvas.width / 2, canvas.height / 2 - 30 * scale);
            ctx.fillStyle = colors.gameOverScoreText;
            ctx.font = `bold ${30 * scale}px Orbitron, Arial`;
            ctx.fillText(`Score: ${currentScore}`, canvas.width / 2, canvas.height / 2 + 20 * scale);
        }
        // Instructions for start screen
        if (!gameState.current.isGameRunning && !gameState.current.isGameOver) {
            ctx.fillStyle = colors.instructionText;
            ctx.font = `bold ${30 * scale}px Orbitron, Arial`;
            ctx.textAlign = 'center';
            ctx.fillText('CLICK / TAP / SPACE TO START', canvas.width / 2, canvas.height / 2);
        }
    };

    useEffect(() => {
        const canvas = canvasRef.current;
        if (canvas && canvasDimensions.width > 0) {
            canvas.width = canvasDimensions.width;
            canvas.height = canvasDimensions.height;
            gameState.current.agentY = canvasDimensions.height / 2;

            if (!animationFrameId.current) {
                animationFrameId.current = requestAnimationFrame(gameLoop);
            }
        }
        return () => {
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current);
                animationFrameId.current = null;
            }
        };
    }, [gameLoop, canvasDimensions]);

    const handleInput = useCallback(() => {
        if (gameState.current.isGameOver) {
            resetGame();
            return;
        }

        if (!gameState.current.isGameRunning) {
            startGame();
            return;
        }

        const scaledJumpForce = JUMP_FORCE * Math.min(canvasDimensions.width / REFERENCE_GAME_WIDTH, canvasDimensions.height / REFERENCE_GAME_HEIGHT);

        if (gameState.current.initialBoostTimer <= 0) {
            gameState.current.agentVelocity = scaledJumpForce;
            console.log("Attempting to play jump sound from handleInput()");
            playSound('jump', 4);
        }

        if (navigator.vibrate) {
            navigator.vibrate(50);
        }
    }, [canvasDimensions, playSound]);

    useEffect(() => {
        const canvas = canvasRef.current;
        if (!canvas) return;

        const handleKeyPress = (e) => {
            if (e.code === 'Space' || e.key === ' ') {
                e.preventDefault();
                handleInput();
            }
        };

        const handleClick = (e) => {
            if (canvas.contains(e.target)) {
                e.preventDefault();
                handleInput();
            }
        };

        const handleTouch = (e) => {
            if (canvas.contains(e.target)) {
                e.preventDefault();
                handleInput();
            }
        };

        document.addEventListener('keydown', handleKeyPress);
        canvas.addEventListener('mousedown', handleClick);
        canvas.addEventListener('touchstart', handleTouch, { passive: false });

        return () => {
            document.removeEventListener('keydown', handleKeyPress);
            if (canvas) {
                canvas.removeEventListener('mousedown', handleClick);
                canvas.removeEventListener('touchstart', handleTouch);
            }
        };
    }, [handleInput]);

    const startGame = () => {
        const effectiveScale = Math.min(canvasDimensions.width / REFERENCE_GAME_WIDTH, canvasDimensions.height / REFERENCE_GAME_HEIGHT);
        const scaledBaseGameSpeed = BASE_GAME_SPEED * effectiveScale;
        const scaledBaseObstacleGapHeight = BASE_OBSTACLE_GAP_HEIGHT * effectiveScale;

        gameState.current = {
            agentY: canvasDimensions.height / 2,
            agentVelocity: 0,
            obstacles: [],
            projectiles: [],
            score: 0,
            frameCount: 0,
            isGameOver: false,
            isGameRunning: true,
            backgroundOffset: 0,
            trailParticles: [],
            initialBoostTimer: INITIAL_BOOST_DURATION,
            currentSpeed: scaledBaseGameSpeed,
            currentGapHeight: scaledBaseObstacleGapHeight,
            health: INITIAL_HEALTH,
            maxHealth: MAX_PLAYER_HEALTH,
            shieldActive: false,
            shieldTimer: 0,
            busterActive: false,
            busterTimer: 0,
            lastBalloonFrame: 0,
            damageFlashTimer: 0,
            damageText: null,
        };
        setCurrentScore(0);
        setIsGameOverScreen(false);
        setIsGameStarted(true);
        setPlayerHealth(INITIAL_HEALTH);

        if (animationFrameId.current) {
            cancelAnimationFrame(animationFrameId.current);
        }
        animationFrameId.current = requestAnimationFrame(gameLoop);
    };

    const resetGame = () => {
        if (animationFrameId.current) {
            cancelAnimationFrame(animationFrameId.current);
            animationFrameId.current = null;
        }

        const effectiveScale = Math.min(canvasDimensions.width / REFERENCE_GAME_WIDTH, canvasDimensions.height / REFERENCE_GAME_HEIGHT);
        const scaledBaseGameSpeed = BASE_GAME_SPEED * effectiveScale;
        const scaledBaseObstacleGapHeight = BASE_OBSTACLE_GAP_HEIGHT * effectiveScale;

        gameState.current = {
            agentY: canvasDimensions.height / 2,
            agentVelocity: 0,
            obstacles: [],
            projectiles: [],
            score: 0,
            frameCount: 0,
            isGameOver: false,
            isGameRunning: false,
            backgroundOffset: 0,
            trailParticles: [],
            initialBoostTimer: 0,
            currentSpeed: scaledBaseGameSpeed,
            currentGapHeight: scaledBaseObstacleGapHeight,
            health: INITIAL_HEALTH,
            maxHealth: MAX_PLAYER_HEALTH,
            shieldActive: false,
            shieldTimer: 0,
            busterActive: false,
            busterTimer: 0,
            lastBalloonFrame: 0,
            damageFlashTimer: 0,
            damageText: null,
        };
        setCurrentScore(0);
        setIsGameOverScreen(false);
        setIsGameStarted(false);
        setPlayerHealth(INITIAL_HEALTH);

        animationFrameId.current = requestAnimationFrame(gameLoop);
    };

    const toggleFullscreen = () => {
        const elem = gameContainerRef.current;

        if (!document.fullscreenElement) {
            if (elem.requestFullscreen) {
                elem.requestFullscreen();
            } else if (elem.webkitRequestFullscreen) { /* Safari */
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) { /* IE11 */
                elem.msRequestFullscreen();
            }
        } else {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.webkitExitFullscreen) { /* Safari */
                document.webkitExitFullscreen();
            } else if (document.msExitFullscreen) { /* IE11 */
                document.msExitFullscreen();
            }
        }
    };

    const effectiveUIScale = Math.min(
        canvasDimensions.width / REFERENCE_GAME_WIDTH,
        canvasDimensions.height / REFERENCE_GAME_HEIGHT
    );
    // Adjusted font sizes with lower minimums if needed, or higher maximums for larger screens.
    // Clamp values using Math.max for minimum and a hardcoded max for visual consistency.
    const titleFontSize = Math.min(40, Math.max(18, 2.5 * 16 * effectiveUIScale));
    const scoreHealthFontSize = Math.min(24, Math.max(14, 1.2 * 16 * effectiveUIScale));
    const instructionFontSize = Math.min(20, Math.max(12, 1.0 * 16 * effectiveUIScale));
    const mobileInstructionFontSize = Math.max(12, 0.9 * 16 * effectiveUIScale);

    return (
        <div ref={gameContainerRef} style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center', // Center content horizontally
            justifyContent: 'center', // Center content vertically
            minHeight: '80vh', // Ensure enough height for vertical centering on initial load
            padding: '10px',
            backgroundColor: currentThemeColors.background.startsWith('linear-gradient') ? 'transparent' : currentThemeColors.background,
            backgroundImage: currentThemeColors.background.startsWith('linear-gradient') ? currentThemeColors.background : 'none',
            borderRadius: '15px',
            border: `3px solid ${currentThemeColors.containerBorder}`,
            boxShadow: `0 0 30px ${currentThemeColors.containerBoxShadow}`,
            fontFamily: '"Orbitron", Arial, sans-serif',
            color: currentThemeColors.heading,
            maxWidth: '95vw', // Allow container to take up more width
            margin: '0 auto',
            position: 'relative',
            overflow: 'hidden'
        }}>
            <style>{`
            @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap');
            /* Ensure smooth transition for fullscreen */
            /* These styles apply to the element that goes fullscreen */
            [data-fullscreen="true"] {
                width: 100vw !important;
                height: 100vh !important;
                max-width: 100vw !important;
                max-height: 100vh !important;
                margin: 0 !important;
                padding: 0 !important;
                box-sizing: border-box;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                background-color: black; /* Ensure black background if there's letter/pillarboxing */
            }

            /* Adjustments for canvas when its parent is fullscreen */
            [data-fullscreen="true"] canvas {
                width: 100% !important;
                height: 100% !important;
                max-width: 100% !important;
                max-height: 100% !important;
                object-fit: contain; /* Important: maintains aspect ratio, adds letter/pillarboxing if needed */
                margin: 0;
            }

            /* Hide scrollbar in fullscreen if content overflows slightly */
            html:-webkit-full-screen { overflow: hidden; }
            html:-moz-full-screen { overflow: hidden; }
            html:-ms-fullscreen { overflow: hidden; }
            html:fullscreen { overflow: hidden; }
        `}</style>

            <h2 style={{
                color: currentThemeColors.heading,
                fontSize: `${titleFontSize}px`,
                marginBottom: '10px',
                textShadow: `0 0 10px ${currentThemeColors.heading}`,
                textAlign: 'center',
                lineHeight: '1.2',
                whiteSpace: 'nowrap' // Prevent wrapping on smaller screens for the title
            }}>
                AGENT GLITCH DASH
            </h2>

            <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%', maxWidth: canvasDimensions.width + 'px', marginBottom: '10px', padding: '0 5px' }}>
                <p style={{
                    color: currentThemeColors.scoreText,
                    fontSize: `${scoreHealthFontSize}px`,
                    textAlign: 'left',
                    flex: 1,
                    whiteSpace: 'nowrap'
                }}>
                    Score: {currentScore}
                </p>
                <p style={{
                    color: currentThemeColors.healthText,
                    fontSize: `${scoreHealthFontSize}px`,
                    textAlign: 'right',
                    flex: 1,
                    whiteSpace: 'nowrap'
                }}>
                    Health: {playerHealth}
                </p>
            </div>

            {isGameOverScreen && (
                <div style={{
                    textAlign: 'center',
                    padding: '20px',
                    backgroundColor: currentThemeColors.gameOverBg,
                    borderRadius: '10px',
                    marginBottom: '20px',
                    border: `2px solid ${currentThemeColors.gameOverHeading}`,
                    position: 'absolute',
                    top: 0, left: 0, right: 0, bottom: 0,
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignItems: 'center',
                    zIndex: 10,
                }}>
                    <h3 style={{
                        color: currentThemeColors.gameOverHeading,
                        fontSize: `${Math.max(20, 24 * effectiveUIScale)}px`,
                        marginBottom: '10px',
                        textShadow: `0 0 10px ${currentThemeColors.gameOverHeading}`
                    }}>
                        MISSION FAILED!
                    </h3>
                    <p style={{ color: currentThemeColors.gameOverScoreText, marginBottom: '15px', fontSize: `${Math.max(14, 16 * effectiveUIScale)}px` }}>
                        Final Score: {currentScore}
                    </p>
                    <button
                        onClick={resetGame}
                        style={{
                            padding: '12px 25px',
                            fontSize: `${Math.max(14, 16 * effectiveUIScale)}px`,
                            fontWeight: 'bold',
                            color: 'white',
                            backgroundColor: currentThemeColors.tryAgainBtnBg,
                            border: `2px solid ${currentThemeColors.tryAgainBtnBorder}`,
                            borderRadius: '8px',
                            cursor: 'pointer',
                            textTransform: 'uppercase'
                        }}
                    >
                        TRY AGAIN
                    </button>
                </div>
            )}
            <canvas
                ref={canvasRef}
                width={canvasDimensions.width}
                height={canvasDimensions.height}
                style={{
                    border: `3px solid ${currentThemeColors.canvasBorder}`,
                    borderRadius: '10px',
                    backgroundColor: 'transparent',
                    boxShadow: `0 0 20px ${currentThemeColors.canvasBoxShadow}`,
                    maxWidth: '100%',
                    maxHeight: '100%',
                    height: 'auto',
                    cursor: 'pointer',
                    display: 'block',
                    objectFit: 'contain',
                    position: 'relative'
                }}
            />
            {/* Fullscreen button */}
            {document.fullscreenEnabled && (
                <button
                    onClick={toggleFullscreen}
                    style={{
                        position: 'absolute',
                        bottom: '15px',
                        right: '15px',
                        padding: '10px 15px',
                        fontSize: '14px',
                        fontWeight: 'bold',
                        backgroundColor: currentThemeColors.fullscreenBtnBg,
                        color: currentThemeColors.fullscreenBtnText,
                        border: `2px solid ${currentThemeColors.containerBorder}`,
                        borderRadius: '8px',
                        cursor: 'pointer',
                        zIndex: 20,
                        boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',
                        // The corrected line is here:
                        display: !isGameOverScreen ? 'block' : 'none'
                    }}
                >
                    {isGameFullscreen ? 'Exit Fullscreen' : 'Fullscreen'}
                </button>
            )}

            <div style={{
                marginTop: '10px',
                textAlign: 'center',
                color: currentThemeColors.instructionText,
                fontSize: `${instructionFontSize}px`
            }}>
                <p>Click, tap, or press SPACE to jump</p>
            </div>

            {/* New: Mobile Portrait Instruction */}
            {isMobilePortrait && !isGameStarted && !isGameOverScreen && (
                <div style={{
                    marginTop: '10px',
                    textAlign: 'center',
                    color: currentThemeColors.instructionText,
                    fontSize: `${mobileInstructionFontSize}px`,
                    whiteSpace: 'normal', // Allow text to wrap
                    maxWidth: '90%', // Limit width
                    lineHeight: '1.4'
                }}>
                    <p>For a larger game experience, consider rotating your device to landscape mode.</p>
                </div>
            )}
        </div>
    );
}


/* ==== FILE: src\components\Footer.jsx ==== */

// src/components/Footer.jsx
import { Rocket, Globe, Moon, Sun } from 'lucide-react';

export default function Footer({ darkMode, toggleDarkMode }) {
    return (
        <footer className="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-white py-16">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="grid md:grid-cols-2 gap-12 mb-12">
                    <div>
                        <div className="flex items-center space-x-2 mb-4">
                            <Rocket className="h-8 w-8 text-blue-400" />
                            <span className="text-2xl font-bold">AI Tools Hub</span>
                        </div>
                        <p className="text-gray-600 dark:text-gray-400 leading-relaxed mb-6">
                            Curating the best AI tools to help entrepreneurs and businesses automate, scale, and succeed in the digital age.
                        </p>
                    </div>

                    <div>
                        <h4 className="text-lg font-semibold mb-4">Legal Information</h4>
                        <div className="text-gray-600 dark:text-gray-400 text-sm leading-relaxed space-y-2">
                            <p>Ram Larsson Digital</p>
                            <p>Norwegian ENK - Org. number: 935384672</p>
                            <p>All affiliate partnerships are clearly disclosed.</p>
                            <p>Testimonials and reviews are sourced from verified platforms.</p>
                        </div>
                    </div>
                </div>

                <div className="border-t border-gray-200 dark:border-gray-800 pt-8 flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
                    <div className="flex items-center space-x-2 text-gray-600 dark:text-gray-400 text-sm">
                        <Globe className="h-4 w-4 text-yellow-400" />
                        <span>
                            Premium domain available for acquisition through{' '}
                            <a href="https://saw.com" target="_blank" rel="noopener noreferrer" className="text-blue-600 dark:text-blue-400 hover:text-blue-500 dark:hover:text-blue-300 underline">
                                saw.com
                            </a>
                        </span>
                    </div>
                    <button
                        onClick={toggleDarkMode}
                        aria-label="Toggle dark mode"
                        className="p-2 rounded-md hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors duration-200"
                    >
                        {darkMode ? <Sun className="h-5 w-5 text-yellow-500" /> : <Moon className="h-5 w-5 text-gray-700 dark:text-gray-400" />}
                    </button>
                    <p className="text-gray-500 dark:text-gray-500 text-sm">
                        © 2025 AI Tools Hub. All rights reserved.
                    </p>
                </div>
            </div>
        </footer>
    );
}


/* ==== FILE: src\components\Navbar.jsx ==== */

// src/components/Navbar.jsx
import { useState } from 'react';
import { Menu, X, Moon, Sun } from 'lucide-react';
import logo from '../assets/Logo_wb.png'; // Adjust path if your asset is elsewhere

export default function Navbar({ darkMode, toggleDarkMode }) {
    const [menuOpen, setMenuOpen] = useState(false);

    return (
        <header className="fixed top-0 left-0 right-0 z-50 bg-white/95 dark:bg-purple-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700 shadow-sm dark:shadow-lg transition-colors duration-300">
            {/* The main nav element is now relative to position the center element */}
            <nav className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-16 flex items-center justify-between">

                {/* 1. Left Section: Logo only */}
                <div className="flex items-center">
                    <div className="rounded-full p-1 bg-gradient-to-tr from-purple-500 via-blue-400 to-pink-400 shadow-lg flex-shrink-0">
                        <img
                            src={logo}
                            alt="Agent Vanguard Logo"
                            className="h-11 w-11 rounded-full border-2 border-white dark:border-purple-900 transition-transform hover:scale-110"
                            draggable={false}
                        />
                    </div>
                </div>

                {/* 2. Center Section: Brand Text (Perfectly Centered) */}
                <div className="absolute left-1/2 -translate-x-1/2">
                    <span
                        className="text-md lg:text-xl font-extrabold tracking-tight bg-gradient-to-r from-purple-600 via-blue-500 to-pink-500 bg-clip-text text-transparent font-montserrat drop-shadow-sm whitespace-nowrap"
                        style={{ fontFamily: "'Montserrat', 'Segoe UI', 'Arial', sans-serif" }}
                    >
                        Agent Vanguard
                    </span>
                </div>

                {/* 3. Right Section: Links and Toggles */}
                <div className="flex items-center">
                    {/* Desktop links and dark mode toggle */}
                    <div className="hidden md:flex space-x-6 items-center">
                        <a
                            href="#tools"
                            className="text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 font-medium transition-colors duration-200 px-3 py-1 rounded-md hover:bg-blue-50 dark:hover:bg-blue-900/20"
                        >
                            Tools
                        </a>
                        <a
                            href="#about"
                            className="text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 font-medium transition-colors duration-200 px-3 py-1 rounded-md hover:bg-blue-50 dark:hover:bg-blue-900/20"
                        >
                            About
                        </a>
                        <button
                            onClick={toggleDarkMode}
                            aria-label="Toggle dark mode"
                            className="p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200"
                            type="button"
                        >
                            {darkMode ? (
                                <Sun className="h-5 w-5 text-yellow-500" />
                            ) : (
                                <Moon className="h-5 w-5 text-gray-700" />
                            )}
                        </button>
                    </div>

                    {/* Mobile Menu Button */}
                    <button
                        onClick={() => setMenuOpen(!menuOpen)}
                        aria-label={menuOpen ? 'Close menu' : 'Open menu'}
                        aria-expanded={menuOpen}
                        className="md:hidden p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition duration-200"
                        type="button"
                    >
                        {menuOpen ? (
                            <X className="h-6 w-6 text-gray-700 dark:text-white" />
                        ) : (
                            <Menu className="h-6 w-6 text-gray-700 dark:text-white" />
                        )}
                    </button>
                </div>
            </nav>

            {/* Mobile Menu with Animation (No changes needed here) */}
            {menuOpen && (
                <div className="md:hidden bg-white/95 dark:bg-purple-900/90 backdrop-blur-md border-b border-gray-200 dark:border-gray-700 shadow-md z-50 animate-fadeIn transition-colors duration-300">
                    <div className="flex flex-col space-y-4 py-6 text-center">
                        <a
                            href="#tools"
                            className="text-lg text-gray-800 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 font-medium transition-colors duration-200 py-2"
                            onClick={() => setMenuOpen(false)}
                        >
                            Tools
                        </a>
                        <a
                            href="#about"
                            className="text-lg text-gray-800 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 font-medium transition-colors duration-200 py-2"
                            onClick={() => setMenuOpen(false)}
                        >
                            About
                        </a>
                        <button
                            onClick={() => {
                                toggleDarkMode();
                                setMenuOpen(false);
                            }}
                            className="text-lg text-gray-800 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 font-medium transition-colors duration-200 py-2 flex justify-center items-center gap-2"
                            type="button"
                        >
                            {darkMode ? 'Light Mode' : 'Dark Mode'}
                            {darkMode ? (
                                <Sun className="h-5 w-5 text-yellow-500" />
                            ) : (
                                <Moon className="h-5 w-5 text-gray-700" />
                            )}
                        </button>
                    </div>
                </div>
            )}
        </header>
    );
}


/* ==== FILE: src\components\ToolCard.jsx ==== */

// src/components/ToolCard.jsx
import React from 'react';
import {
    ArrowRight,
    ExternalLink,
    Star,
    StarHalf,
    Rocket,
    Wand2,
    CreditCard,
    Globe,
    Brain,
    FileText,
    Cog,
    Eye,
    ShieldCheck,
    Puzzle,
    Lightbulb,
    Bot,
    MessagesSquare,
    UserCheck,
    Zap,
    TrendingUp,
    ShoppingCart,
    List,
    Briefcase,
    BarChart,
} from 'lucide-react';

const iconMap = {
    ArrowRight,
    ExternalLink,
    Star,
    StarHalf,
    Rocket,
    Wand2,
    CreditCard,
    Globe,
    Brain,
    FileText,
    Cog,
    Eye,
    ShieldCheck,
    Puzzle,
    Lightbulb,
    Bot,
    MessagesSquare,
    UserCheck,
    Zap,
    TrendingUp,
    ShoppingCart,
    List,
    Briefcase,
    BarChart,
};

const renderStars = (rating) => {
    if (!rating) return null;
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    for (let i = 0; i < fullStars; i++) {
        stars.push(<Star key={`star-full-${i}`} className="text-yellow-400 dark:text-yellow-300" />);
    }
    if (hasHalfStar) {
        stars.push(<StarHalf key="star-half" className="text-yellow-400 dark:text-yellow-300" />);
    }
    return stars;
};

const ToolCard = ({
    href,
    logo,
    category,
    categoryColor,
    title,
    subtitle,
    description,
    features,
    pricing,
    testimonial,
    cta,
}) => {
    const LogoComponent = logo.type === 'icon' ? iconMap[logo.icon] : null;

    return (
        <a
            href={href}
            target="_blank"
            rel="noopener noreferrer"
            className="block rounded-xl bg-white dark:bg-indigo-900 shadow hover:shadow-lg dark:shadow-indigo-950/50 transition p-6"
        >
            <div className="flex justify-between items-center mb-4">
                {logo.type === 'image' ? (
                    <img src={logo.src} alt={logo.alt} className="h-16 w-16 object-contain" />
                ) : LogoComponent ? (
                    <div className={`rounded-lg p-3 ${logo.color} dark:opacity-90`}>
                        <LogoComponent className="w-8 h-8 text-white" />
                    </div>
                ) : (
                    <div className="h-16 w-16 bg-gray-300 dark:bg-indigo-800 rounded-lg" />
                )}
                <span className={`text-xs uppercase font-bold px-3 py-1 rounded-full ${categoryColor} text-white dark:opacity-90`}>
                    {category}
                </span>
            </div>
            <h3 className="text-xl font-semibold mb-1 text-gray-900 dark:text-indigo-100">{title}</h3>
            <p className="text-blue-600 dark:text-blue-300 mb-2">{subtitle}</p>
            <p className="text-gray-600 dark:text-indigo-300 text-sm mb-4">{description}</p>
            {features && (
                <ul className="mb-4 space-y-2">
                    {features.map(({ icon, text }, idx) => {
                        const FeatureIcon = iconMap[icon];
                        return (
                            <li key={idx} className="flex items-center space-x-2 text-gray-700 dark:text-indigo-200">
                                {FeatureIcon && <FeatureIcon className="w-4 h-4 text-green-500 dark:text-green-300" />}
                                <span className="text-sm">{text}</span>
                            </li>
                        );
                    })}
                </ul>
            )}
            {pricing && (
                <div className="mb-4 grid grid-cols-2 gap-2 text-center">
                    {pricing.map(({ plan, price, note }, idx) => (
                        <div key={idx} className="bg-gray-100 dark:bg-indigo-800 rounded p-2">
                            <div className="text-sm font-semibold text-gray-900 dark:text-indigo-100">{plan}</div>
                            <div className="text-lg font-bold text-blue-600 dark:text-blue-300">{price}</div>
                            <div className="text-xs text-gray-500 dark:text-indigo-400">{note}</div>
                        </div>
                    ))}
                </div>
            )}
            {testimonial && (
                <div className="rounded bg-blue-50 dark:bg-indigo-800/50 p-4">
                    {testimonial.rating && <div className="flex space-x-1">{renderStars(testimonial.rating)}</div>}
                    {testimonial.text && <p className="italic text-gray-700 dark:text-indigo-200 mt-2">{testimonial.text}</p>}
                    {testimonial.source && <p className="text-xs text-gray-500 dark:text-indigo-400 mt-1">{testimonial.source}</p>}
                    {testimonial.icon && (() => {
                        const Icon = iconMap[testimonial.icon];
                        return Icon ? <Icon className="mt-2 w-5 h-5 text-blue-600 dark:text-blue-300" /> : null;
                    })()}
                </div>
            )}
            <div className="mt-6 flex justify-between items-center border-t border-gray-200 dark:border-indigo-700 pt-4">
                <span className="flex items-center space-x-1 text-sm text-gray-500 dark:text-indigo-400">
                    <ExternalLink className="w-4 h-4" />
                    <span>Affiliate Link</span>
                </span>
                <span className="inline-flex items-center gap-1 rounded bg-blue-600 dark:bg-blue-500 px-4 py-2 text-white font-semibold hover:bg-blue-700 dark:hover:bg-blue-400 cursor-pointer transition">
                    {cta}
                    <ArrowRight className="w-4 h-4" />
                </span>
            </div>
        </a>
    );
};

export default ToolCard;


/* ==== FILE: src\components\ui\accordion.jsx ==== */

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Accordion({
  ...props
}) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />;
}

function AccordionItem({
  className,
  ...props
}) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props} />
  );
}

function AccordionTrigger({
  className,
  children,
  ...props
}) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}>
        {children}
        <ChevronDownIcon
          className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  );
}

function AccordionContent({
  className,
  children,
  ...props
}) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}>
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  );
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


/* ==== FILE: src\components\ui\alert-dialog.jsx ==== */

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function AlertDialog({
  ...props
}) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />;
}

function AlertDialogTrigger({
  ...props
}) {
  return (<AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />);
}

function AlertDialogPortal({
  ...props
}) {
  return (<AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />);
}

function AlertDialogOverlay({
  className,
  ...props
}) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props} />
  );
}

function AlertDialogContent({
  className,
  ...props
}) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props} />
    </AlertDialogPortal>
  );
}

function AlertDialogHeader({
  className,
  ...props
}) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props} />
  );
}

function AlertDialogFooter({
  className,
  ...props
}) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end", className)}
      {...props} />
  );
}

function AlertDialogTitle({
  className,
  ...props
}) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props} />
  );
}

function AlertDialogDescription({
  className,
  ...props
}) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />
  );
}

function AlertDialogAction({
  className,
  ...props
}) {
  return (<AlertDialogPrimitive.Action className={cn(buttonVariants(), className)} {...props} />);
}

function AlertDialogCancel({
  className,
  ...props
}) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props} />
  );
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


/* ==== FILE: src\components\ui\alert.jsx ==== */

import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props} />
  );
}

function AlertTitle({
  className,
  ...props
}) {
  return (
    <div
      data-slot="alert-title"
      className={cn("col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight", className)}
      {...props} />
  );
}

function AlertDescription({
  className,
  ...props
}) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props} />
  );
}

export { Alert, AlertTitle, AlertDescription }


/* ==== FILE: src\components\ui\aspect-ratio.jsx ==== */

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

function AspectRatio({
  ...props
}) {
  return <AspectRatioPrimitive.Root data-slot="aspect-ratio" {...props} />;
}

export { AspectRatio }


/* ==== FILE: src\components\ui\avatar.jsx ==== */

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn("relative flex size-8 shrink-0 overflow-hidden rounded-full", className)}
      {...props} />
  );
}

function AvatarImage({
  className,
  ...props
}) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props} />
  );
}

function AvatarFallback({
  className,
  ...props
}) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props} />
  );
}

export { Avatar, AvatarImage, AvatarFallback }


/* ==== FILE: src\components\ui\badge.jsx ==== */

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props} />
  );
}

export { Badge, badgeVariants }


/* ==== FILE: src\components\ui\breadcrumb.jsx ==== */

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

function Breadcrumb({
  ...props
}) {
  return <nav aria-label="breadcrumb" data-slot="breadcrumb" {...props} />;
}

function BreadcrumbList({
  className,
  ...props
}) {
  return (
    <ol
      data-slot="breadcrumb-list"
      className={cn(
        "text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5",
        className
      )}
      {...props} />
  );
}

function BreadcrumbItem({
  className,
  ...props
}) {
  return (
    <li
      data-slot="breadcrumb-item"
      className={cn("inline-flex items-center gap-1.5", className)}
      {...props} />
  );
}

function BreadcrumbLink({
  asChild,
  className,
  ...props
}) {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      data-slot="breadcrumb-link"
      className={cn("hover:text-foreground transition-colors", className)}
      {...props} />
  );
}

function BreadcrumbPage({
  className,
  ...props
}) {
  return (
    <span
      data-slot="breadcrumb-page"
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn("text-foreground font-normal", className)}
      {...props} />
  );
}

function BreadcrumbSeparator({
  children,
  className,
  ...props
}) {
  return (
    <li
      data-slot="breadcrumb-separator"
      role="presentation"
      aria-hidden="true"
      className={cn("[&>svg]:size-3.5", className)}
      {...props}>
      {children ?? <ChevronRight />}
    </li>
  );
}

function BreadcrumbEllipsis({
  className,
  ...props
}) {
  return (
    <span
      data-slot="breadcrumb-ellipsis"
      role="presentation"
      aria-hidden="true"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}>
      <MoreHorizontal className="size-4" />
      <span className="sr-only">More</span>
    </span>
  );
}

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


/* ==== FILE: src\components\ui\button.jsx ==== */

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props} />
  );
}

export { Button, buttonVariants }


/* ==== FILE: src\components\ui\calendar.jsx ==== */

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row gap-2",
        month: "flex flex-col gap-4",
        caption: "flex justify-center pt-1 relative items-center w-full",
        caption_label: "text-sm font-medium",
        nav: "flex items-center gap-1",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "size-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-x-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "size-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start:
          "day-range-start aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_range_end:
          "day-range-end aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("size-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("size-4", className)} {...props} />
        ),
      }}
      {...props} />
  );
}

export { Calendar }


/* ==== FILE: src\components\ui\card.jsx ==== */

import * as React from "react"

import { cn } from "@/lib/utils"

function Card({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props} />
  );
}

function CardHeader({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props} />
  );
}

function CardTitle({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props} />
  );
}

function CardDescription({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />
  );
}

function CardAction({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props} />
  );
}

function CardContent({
  className,
  ...props
}) {
  return (<div data-slot="card-content" className={cn("px-6", className)} {...props} />);
}

function CardFooter({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props} />
  );
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}


/* ==== FILE: src\components\ui\carousel.jsx ==== */

"use client";
import * as React from "react"
import useEmblaCarousel from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

const CarouselContext = React.createContext(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

function Carousel({
  orientation = "horizontal",
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}) {
  const [carouselRef, api] = useEmblaCarousel({
    ...opts,
    axis: orientation === "horizontal" ? "x" : "y",
  }, plugins)
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api) => {
    if (!api) return
    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback((event) => {
    if (event.key === "ArrowLeft") {
      event.preventDefault()
      scrollPrev()
    } else if (event.key === "ArrowRight") {
      event.preventDefault()
      scrollNext()
    }
  }, [scrollPrev, scrollNext])

  React.useEffect(() => {
    if (!api || !setApi) return
    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) return
    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)

    return () => {
      api?.off("select", onSelect)
    };
  }, [api, onSelect])

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}>
      <div
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        data-slot="carousel"
        {...props}>
        {children}
      </div>
    </CarouselContext.Provider>
  );
}

function CarouselContent({
  className,
  ...props
}) {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div
      ref={carouselRef}
      className="overflow-hidden"
      data-slot="carousel-content">
      <div
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props} />
    </div>
  );
}

function CarouselItem({
  className,
  ...props
}) {
  const { orientation } = useCarousel()

  return (
    <div
      role="group"
      aria-roledescription="slide"
      data-slot="carousel-item"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props} />
  );
}

function CarouselPrevious({
  className,
  variant = "outline",
  size = "icon",
  ...props
}) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      data-slot="carousel-previous"
      variant={variant}
      size={size}
      className={cn("absolute size-8 rounded-full", orientation === "horizontal"
        ? "top-1/2 -left-12 -translate-y-1/2"
        : "-top-12 left-1/2 -translate-x-1/2 rotate-90", className)}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}>
      <ArrowLeft />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
}

function CarouselNext({
  className,
  variant = "outline",
  size = "icon",
  ...props
}) {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      data-slot="carousel-next"
      variant={variant}
      size={size}
      className={cn("absolute size-8 rounded-full", orientation === "horizontal"
        ? "top-1/2 -right-12 -translate-y-1/2"
        : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90", className)}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}>
      <ArrowRight />
      <span className="sr-only">Next slide</span>
    </Button>
  );
}

export { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };


/* ==== FILE: src\components\ui\chart.jsx ==== */

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = {
  light: "",
  dark: ".dark"
}

const ChartContext = React.createContext(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

function ChartContainer({
  id,
  className,
  children,
  config,
  ...props
}) {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-slot="chart"
        data-chart={chartId}
        className={cn(
          "[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden",
          className
        )}
        {...props}>
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
}

const ChartStyle = ({
  id,
  config
}) => {
  const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color)

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
.map(([key, itemConfig]) => {
const color =
  itemConfig.theme?.[theme] ||
  itemConfig.color
return color ? `  --color-${key}: ${color};` : null
})
.join("\n")}
}
`)
          .join("\n"),
      }} />
  );
}

const ChartTooltip = RechartsPrimitive.Tooltip

function ChartTooltipContent({
  active,
  payload,
  className,
  indicator = "dot",
  hideLabel = false,
  hideIndicator = false,
  label,
  labelFormatter,
  labelClassName,
  formatter,
  color,
  nameKey,
  labelKey
}) {
  const { config } = useChart()

  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null
    }

    const [item] = payload
    const key = `${labelKey || item?.dataKey || item?.name || "value"}`
    const itemConfig = getPayloadConfigFromPayload(config, item, key)
    const value =
      !labelKey && typeof label === "string"
        ? config[label]?.label || label
        : itemConfig?.label

    if (labelFormatter) {
      return (
        <div className={cn("font-medium", labelClassName)}>
          {labelFormatter(value, payload)}
        </div>
      );
    }

    if (!value) {
      return null
    }

    return <div className={cn("font-medium", labelClassName)}>{value}</div>;
  }, [
    label,
    labelFormatter,
    payload,
    hideLabel,
    labelClassName,
    config,
    labelKey,
  ])

  if (!active || !payload?.length) {
    return null
  }

  const nestLabel = payload.length === 1 && indicator !== "dot"

  return (
    <div
      className={cn(
        "border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl",
        className
      )}>
      {!nestLabel ? tooltipLabel : null}
      <div className="grid gap-1.5">
        {payload.map((item, index) => {
          const key = `${nameKey || item.name || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)
          const indicatorColor = color || item.payload.fill || item.color

          return (
            <div
              key={item.dataKey}
              className={cn(
                "[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5",
                indicator === "dot" && "items-center"
              )}>
              {formatter && item?.value !== undefined && item.name ? (
                formatter(item.value, item.name, item, index, item.payload)
              ) : (
                <>
                  {itemConfig?.icon ? (
                    <itemConfig.icon />
                  ) : (
                    !hideIndicator && (
                      <div
                        className={cn("shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)", {
                          "h-2.5 w-2.5": indicator === "dot",
                          "w-1": indicator === "line",
                          "w-0 border-[1.5px] border-dashed bg-transparent":
                            indicator === "dashed",
                          "my-0.5": nestLabel && indicator === "dashed",
                        })}
                        style={
                          {
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor
                          }
                        } />
                    )
                  )}
                  <div
                    className={cn(
                      "flex flex-1 justify-between leading-none",
                      nestLabel ? "items-end" : "items-center"
                    )}>
                    <div className="grid gap-1.5">
                      {nestLabel ? tooltipLabel : null}
                      <span className="text-muted-foreground">
                        {itemConfig?.label || item.name}
                      </span>
                    </div>
                    {item.value && (
                      <span className="text-foreground font-mono font-medium tabular-nums">
                        {item.value.toLocaleString()}
                      </span>
                    )}
                  </div>
                </>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
}

const ChartLegend = RechartsPrimitive.Legend

function ChartLegendContent({
  className,
  hideIcon = false,
  payload,
  verticalAlign = "bottom",
  nameKey
}) {
  const { config } = useChart()

  if (!payload?.length) {
    return null
  }

  return (
    <div
      className={cn(
        "flex items-center justify-center gap-4",
        verticalAlign === "top" ? "pb-3" : "pt-3",
        className
      )}>
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`
        const itemConfig = getPayloadConfigFromPayload(config, item, key)

        return (
          <div
            key={item.value}
            className={cn(
              "[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3"
            )}>
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }} />
            )}
            {itemConfig?.label}
          </div>
        );
      })}
    </div>
  );
}

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config,
  payload,
  key
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey = key

  if (
    key in payload &&
    typeof payload[key] === "string"
  ) {
    configLabelKey = payload[key]
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key] === "string"
  ) {
    configLabelKey = payloadPayload[key]
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


/* ==== FILE: src\components\ui\checkbox.jsx ==== */

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}>
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none">
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  );
}

export { Checkbox }


/* ==== FILE: src\components\ui\collapsible.jsx ==== */

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

function Collapsible({
  ...props
}) {
  return <CollapsiblePrimitive.Root data-slot="collapsible" {...props} />;
}

function CollapsibleTrigger({
  ...props
}) {
  return (<CollapsiblePrimitive.CollapsibleTrigger data-slot="collapsible-trigger" {...props} />);
}

function CollapsibleContent({
  ...props
}) {
  return (<CollapsiblePrimitive.CollapsibleContent data-slot="collapsible-content" {...props} />);
}

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


/* ==== FILE: src\components\ui\command.jsx ==== */

"use client"

import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

function Command({
  className,
  ...props
}) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props} />
  );
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  ...props
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent className="overflow-hidden p-0">
        <Command
          className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
}

function CommandInput({
  className,
  ...props
}) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3">
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props} />
    </div>
  );
}

function CommandList({
  className,
  ...props
}) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn("max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto", className)}
      {...props} />
  );
}

function CommandEmpty({
  ...props
}) {
  return (<CommandPrimitive.Empty data-slot="command-empty" className="py-6 text-center text-sm" {...props} />);
}

function CommandGroup({
  className,
  ...props
}) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props} />
  );
}

function CommandSeparator({
  className,
  ...props
}) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props} />
  );
}

function CommandItem({
  className,
  ...props
}) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props} />
  );
}

function CommandShortcut({
  className,
  ...props
}) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn("text-muted-foreground ml-auto text-xs tracking-widest", className)}
      {...props} />
  );
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


/* ==== FILE: src\components\ui\context-menu.jsx ==== */

"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function ContextMenu({
  ...props
}) {
  return <ContextMenuPrimitive.Root data-slot="context-menu" {...props} />;
}

function ContextMenuTrigger({
  ...props
}) {
  return (<ContextMenuPrimitive.Trigger data-slot="context-menu-trigger" {...props} />);
}

function ContextMenuGroup({
  ...props
}) {
  return (<ContextMenuPrimitive.Group data-slot="context-menu-group" {...props} />);
}

function ContextMenuPortal({
  ...props
}) {
  return (<ContextMenuPrimitive.Portal data-slot="context-menu-portal" {...props} />);
}

function ContextMenuSub({
  ...props
}) {
  return <ContextMenuPrimitive.Sub data-slot="context-menu-sub" {...props} />;
}

function ContextMenuRadioGroup({
  ...props
}) {
  return (<ContextMenuPrimitive.RadioGroup data-slot="context-menu-radio-group" {...props} />);
}

function ContextMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}) {
  return (
    <ContextMenuPrimitive.SubTrigger
      data-slot="context-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}>
      {children}
      <ChevronRightIcon className="ml-auto" />
    </ContextMenuPrimitive.SubTrigger>
  );
}

function ContextMenuSubContent({
  className,
  ...props
}) {
  return (
    <ContextMenuPrimitive.SubContent
      data-slot="context-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props} />
  );
}

function ContextMenuContent({
  className,
  ...props
}) {
  return (
    <ContextMenuPrimitive.Portal>
      <ContextMenuPrimitive.Content
        data-slot="context-menu-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props} />
    </ContextMenuPrimitive.Portal>
  );
}

function ContextMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}) {
  return (
    <ContextMenuPrimitive.Item
      data-slot="context-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props} />
  );
}

function ContextMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}) {
  return (
    <ContextMenuPrimitive.CheckboxItem
      data-slot="context-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}>
      <span
        className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.CheckboxItem>
  );
}

function ContextMenuRadioItem({
  className,
  children,
  ...props
}) {
  return (
    <ContextMenuPrimitive.RadioItem
      data-slot="context-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}>
      <span
        className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.RadioItem>
  );
}

function ContextMenuLabel({
  className,
  inset,
  ...props
}) {
  return (
    <ContextMenuPrimitive.Label
      data-slot="context-menu-label"
      data-inset={inset}
      className={cn(
        "text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props} />
  );
}

function ContextMenuSeparator({
  className,
  ...props
}) {
  return (
    <ContextMenuPrimitive.Separator
      data-slot="context-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props} />
  );
}

function ContextMenuShortcut({
  className,
  ...props
}) {
  return (
    <span
      data-slot="context-menu-shortcut"
      className={cn("text-muted-foreground ml-auto text-xs tracking-widest", className)}
      {...props} />
  );
}

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


/* ==== FILE: src\components\ui\dialog.jsx ==== */

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props} />
  );
}

function DialogContent({
  className,
  children,
  ...props
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}>
        {children}
        <DialogPrimitive.Close
          className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({
  className,
  ...props
}) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props} />
  );
}

function DialogFooter({
  className,
  ...props
}) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end", className)}
      {...props} />
  );
}

function DialogTitle({
  className,
  ...props
}) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props} />
  );
}

function DialogDescription({
  className,
  ...props
}) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}


/* ==== FILE: src\components\ui\drawer.jsx ==== */

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

function Drawer({
  ...props
}) {
  return <DrawerPrimitive.Root data-slot="drawer" {...props} />;
}

function DrawerTrigger({
  ...props
}) {
  return <DrawerPrimitive.Trigger data-slot="drawer-trigger" {...props} />;
}

function DrawerPortal({
  ...props
}) {
  return <DrawerPrimitive.Portal data-slot="drawer-portal" {...props} />;
}

function DrawerClose({
  ...props
}) {
  return <DrawerPrimitive.Close data-slot="drawer-close" {...props} />;
}

function DrawerOverlay({
  className,
  ...props
}) {
  return (
    <DrawerPrimitive.Overlay
      data-slot="drawer-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props} />
  );
}

function DrawerContent({
  className,
  children,
  ...props
}) {
  return (
    <DrawerPortal data-slot="drawer-portal">
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          "group/drawer-content bg-background fixed z-50 flex h-auto flex-col",
          "data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b",
          "data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t",
          "data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm",
          "data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm",
          className
        )}
        {...props}>
        <div
          className="bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  );
}

function DrawerHeader({
  className,
  ...props
}) {
  return (
    <div
      data-slot="drawer-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props} />
  );
}

function DrawerFooter({
  className,
  ...props
}) {
  return (
    <div
      data-slot="drawer-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props} />
  );
}

function DrawerTitle({
  className,
  ...props
}) {
  return (
    <DrawerPrimitive.Title
      data-slot="drawer-title"
      className={cn("text-foreground font-semibold", className)}
      {...props} />
  );
}

function DrawerDescription({
  className,
  ...props
}) {
  return (
    <DrawerPrimitive.Description
      data-slot="drawer-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />
  );
}

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


/* ==== FILE: src\components\ui\dropdown-menu.jsx ==== */

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}

function DropdownMenuPortal({
  ...props
}) {
  return (<DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />);
}

function DropdownMenuTrigger({
  ...props
}) {
  return (<DropdownMenuPrimitive.Trigger data-slot="dropdown-menu-trigger" {...props} />);
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props} />
    </DropdownMenuPrimitive.Portal>
  );
}

function DropdownMenuGroup({
  ...props
}) {
  return (<DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />);
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props} />
  );
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}>
      <span
        className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  );
}

function DropdownMenuRadioGroup({
  ...props
}) {
  return (<DropdownMenuPrimitive.RadioGroup data-slot="dropdown-menu-radio-group" {...props} />);
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}>
      <span
        className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  );
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn("px-2 py-1.5 text-sm font-medium data-[inset]:pl-8", className)}
      {...props} />
  );
}

function DropdownMenuSeparator({
  className,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props} />
  );
}

function DropdownMenuShortcut({
  className,
  ...props
}) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn("text-muted-foreground ml-auto text-xs tracking-widest", className)}
      {...props} />
  );
}

function DropdownMenuSub({
  ...props
}) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}>
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  );
}

function DropdownMenuSubContent({
  className,
  ...props
}) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props} />
  );
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}


/* ==== FILE: src\components\ui\form.jsx ==== */

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { Controller, FormProvider, useFormContext, useFormState } from "react-hook-form";

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

const FormFieldContext = React.createContext({})

const FormField = (
  {
    ...props
  }
) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

const FormItemContext = React.createContext({})

function FormItem({
  className,
  ...props
}) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div data-slot="form-item" className={cn("grid gap-2", className)} {...props} />
    </FormItemContext.Provider>
  );
}

function FormLabel({
  className,
  ...props
}) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props} />
  );
}

function FormControl({
  ...props
}) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props} />
  );
}

function FormDescription({
  className,
  ...props
}) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />
  );
}

function FormMessage({
  className,
  ...props
}) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}>
      {body}
    </p>
  );
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


/* ==== FILE: src\components\ui\hover-card.jsx ==== */

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

function HoverCard({
  ...props
}) {
  return <HoverCardPrimitive.Root data-slot="hover-card" {...props} />;
}

function HoverCardTrigger({
  ...props
}) {
  return (<HoverCardPrimitive.Trigger data-slot="hover-card-trigger" {...props} />);
}

function HoverCardContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}) {
  return (
    <HoverCardPrimitive.Portal data-slot="hover-card-portal">
      <HoverCardPrimitive.Content
        data-slot="hover-card-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props} />
    </HoverCardPrimitive.Portal>
  );
}

export { HoverCard, HoverCardTrigger, HoverCardContent }


/* ==== FILE: src\components\ui\input-otp.jsx ==== */

"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { MinusIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function InputOTP({
  className,
  containerClassName,
  ...props
}) {
  return (
    <OTPInput
      data-slot="input-otp"
      containerClassName={cn("flex items-center gap-2 has-disabled:opacity-50", containerClassName)}
      className={cn("disabled:cursor-not-allowed", className)}
      {...props} />
  );
}

function InputOTPGroup({
  className,
  ...props
}) {
  return (
    <div
      data-slot="input-otp-group"
      className={cn("flex items-center", className)}
      {...props} />
  );
}

function InputOTPSlot({
  index,
  className,
  ...props
}) {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}

  return (
    <div
      data-slot="input-otp-slot"
      data-active={isActive}
      className={cn(
        "data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]",
        className
      )}
      {...props}>
      {char}
      {hasFakeCaret && (
        <div
          className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink bg-foreground h-4 w-px duration-1000" />
        </div>
      )}
    </div>
  );
}

function InputOTPSeparator({
  ...props
}) {
  return (
    <div data-slot="input-otp-separator" role="separator" {...props}>
      <MinusIcon />
    </div>
  );
}

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


/* ==== FILE: src\components\ui\input.jsx ==== */

import * as React from "react"

import { cn } from "@/lib/utils"

function Input({
  className,
  type,
  ...props
}) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props} />
  );
}

export { Input }


/* ==== FILE: src\components\ui\label.jsx ==== */

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props} />
  );
}

export { Label }


/* ==== FILE: src\components\ui\menubar.jsx ==== */

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Menubar({
  className,
  ...props
}) {
  return (
    <MenubarPrimitive.Root
      data-slot="menubar"
      className={cn(
        "bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs",
        className
      )}
      {...props} />
  );
}

function MenubarMenu({
  ...props
}) {
  return <MenubarPrimitive.Menu data-slot="menubar-menu" {...props} />;
}

function MenubarGroup({
  ...props
}) {
  return <MenubarPrimitive.Group data-slot="menubar-group" {...props} />;
}

function MenubarPortal({
  ...props
}) {
  return <MenubarPrimitive.Portal data-slot="menubar-portal" {...props} />;
}

function MenubarRadioGroup({
  ...props
}) {
  return (<MenubarPrimitive.RadioGroup data-slot="menubar-radio-group" {...props} />);
}

function MenubarTrigger({
  className,
  ...props
}) {
  return (
    <MenubarPrimitive.Trigger
      data-slot="menubar-trigger"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none",
        className
      )}
      {...props} />
  );
}

function MenubarContent({
  className,
  align = "start",
  alignOffset = -4,
  sideOffset = 8,
  ...props
}) {
  return (
    <MenubarPortal>
      <MenubarPrimitive.Content
        data-slot="menubar-content"
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md",
          className
        )}
        {...props} />
    </MenubarPortal>
  );
}

function MenubarItem({
  className,
  inset,
  variant = "default",
  ...props
}) {
  return (
    <MenubarPrimitive.Item
      data-slot="menubar-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props} />
  );
}

function MenubarCheckboxItem({
  className,
  children,
  checked,
  ...props
}) {
  return (
    <MenubarPrimitive.CheckboxItem
      data-slot="menubar-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}>
      <span
        className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.CheckboxItem>
  );
}

function MenubarRadioItem({
  className,
  children,
  ...props
}) {
  return (
    <MenubarPrimitive.RadioItem
      data-slot="menubar-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}>
      <span
        className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.RadioItem>
  );
}

function MenubarLabel({
  className,
  inset,
  ...props
}) {
  return (
    <MenubarPrimitive.Label
      data-slot="menubar-label"
      data-inset={inset}
      className={cn("px-2 py-1.5 text-sm font-medium data-[inset]:pl-8", className)}
      {...props} />
  );
}

function MenubarSeparator({
  className,
  ...props
}) {
  return (
    <MenubarPrimitive.Separator
      data-slot="menubar-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props} />
  );
}

function MenubarShortcut({
  className,
  ...props
}) {
  return (
    <span
      data-slot="menubar-shortcut"
      className={cn("text-muted-foreground ml-auto text-xs tracking-widest", className)}
      {...props} />
  );
}

function MenubarSub({
  ...props
}) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />;
}

function MenubarSubTrigger({
  className,
  inset,
  children,
  ...props
}) {
  return (
    <MenubarPrimitive.SubTrigger
      data-slot="menubar-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8",
        className
      )}
      {...props}>
      {children}
      <ChevronRightIcon className="ml-auto h-4 w-4" />
    </MenubarPrimitive.SubTrigger>
  );
}

function MenubarSubContent({
  className,
  ...props
}) {
  return (
    <MenubarPrimitive.SubContent
      data-slot="menubar-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props} />
  );
}

export {
  Menubar,
  MenubarPortal,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarGroup,
  MenubarSeparator,
  MenubarLabel,
  MenubarItem,
  MenubarShortcut,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarSub,
  MenubarSubTrigger,
  MenubarSubContent,
}


/* ==== FILE: src\components\ui\navigation-menu.jsx ==== */

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function NavigationMenu({
  className,
  children,
  viewport = true,
  ...props
}) {
  return (
    <NavigationMenuPrimitive.Root
      data-slot="navigation-menu"
      data-viewport={viewport}
      className={cn(
        "group/navigation-menu relative flex max-w-max flex-1 items-center justify-center",
        className
      )}
      {...props}>
      {children}
      {viewport && <NavigationMenuViewport />}
    </NavigationMenuPrimitive.Root>
  );
}

function NavigationMenuList({
  className,
  ...props
}) {
  return (
    <NavigationMenuPrimitive.List
      data-slot="navigation-menu-list"
      className={cn("group flex flex-1 list-none items-center justify-center gap-1", className)}
      {...props} />
  );
}

function NavigationMenuItem({
  className,
  ...props
}) {
  return (
    <NavigationMenuPrimitive.Item
      data-slot="navigation-menu-item"
      className={cn("relative", className)}
      {...props} />
  );
}

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1"
)

function NavigationMenuTrigger({
  className,
  children,
  ...props
}) {
  return (
    <NavigationMenuPrimitive.Trigger
      data-slot="navigation-menu-trigger"
      className={cn(navigationMenuTriggerStyle(), "group", className)}
      {...props}>
      {children}{" "}
      <ChevronDownIcon
        className="relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180"
        aria-hidden="true" />
    </NavigationMenuPrimitive.Trigger>
  );
}

function NavigationMenuContent({
  className,
  ...props
}) {
  return (
    <NavigationMenuPrimitive.Content
      data-slot="navigation-menu-content"
      className={cn(
        "data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto",
        "group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none",
        className
      )}
      {...props} />
  );
}

function NavigationMenuViewport({
  className,
  ...props
}) {
  return (
    <div
      className={cn("absolute top-full left-0 isolate z-50 flex justify-center")}>
      <NavigationMenuPrimitive.Viewport
        data-slot="navigation-menu-viewport"
        className={cn(
          "origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]",
          className
        )}
        {...props} />
    </div>
  );
}

function NavigationMenuLink({
  className,
  ...props
}) {
  return (
    <NavigationMenuPrimitive.Link
      data-slot="navigation-menu-link"
      className={cn(
        "data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props} />
  );
}

function NavigationMenuIndicator({
  className,
  ...props
}) {
  return (
    <NavigationMenuPrimitive.Indicator
      data-slot="navigation-menu-indicator"
      className={cn(
        "data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden",
        className
      )}
      {...props}>
      <div
        className="bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" />
    </NavigationMenuPrimitive.Indicator>
  );
}

export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
  navigationMenuTriggerStyle,
}


/* ==== FILE: src\components\ui\pagination.jsx ==== */

import * as React from "react"
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from "lucide-react"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button";

function Pagination({
  className,
  ...props
}) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn("mx-auto flex w-full justify-center", className)}
      {...props} />
  );
}

function PaginationContent({
  className,
  ...props
}) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn("flex flex-row items-center gap-1", className)}
      {...props} />
  );
}

function PaginationItem({
  ...props
}) {
  return <li data-slot="pagination-item" {...props} />;
}

function PaginationLink({
  className,
  isActive,
  size = "icon",
  ...props
}) {
  return (
    <a
      aria-current={isActive ? "page" : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }), className)}
      {...props} />
  );
}

function PaginationPrevious({
  className,
  ...props
}) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pl-2.5", className)}
      {...props}>
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  );
}

function PaginationNext({
  className,
  ...props
}) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pr-2.5", className)}
      {...props}>
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  );
}

function PaginationEllipsis({
  className,
  ...props
}) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}>
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  );
}

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}


/* ==== FILE: src\components\ui\popover.jsx ==== */

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />;
}

function PopoverTrigger({
  ...props
}) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />;
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props} />
    </PopoverPrimitive.Portal>
  );
}

function PopoverAnchor({
  ...props
}) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />;
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }


/* ==== FILE: src\components\ui\progress.jsx ==== */

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}>
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />
    </ProgressPrimitive.Root>
  );
}

export { Progress }


/* ==== FILE: src\components\ui\radio-group.jsx ==== */

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function RadioGroup({
  className,
  ...props
}) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props} />
  );
}

function RadioGroupItem({
  className,
  ...props
}) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}>
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center">
        <CircleIcon
          className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
}

export { RadioGroup, RadioGroupItem }


/* ==== FILE: src\components\ui\resizable.jsx ==== */

import * as React from "react"
import { GripVerticalIcon } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

function ResizablePanelGroup({
  className,
  ...props
}) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
        className
      )}
      {...props} />
  );
}

function ResizablePanel({
  ...props
}) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />;
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        "bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
        className
      )}
      {...props}>
      {withHandle && (
        <div
          className="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  );
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


/* ==== FILE: src\components\ui\scroll-area.jsx ==== */

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}) {
  return (
    <ScrollAreaPrimitive.Root data-slot="scroll-area" className={cn("relative", className)} {...props}>
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1">
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  );
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}>
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full" />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  );
}

export { ScrollArea, ScrollBar }


/* ==== FILE: src\components\ui\select.jsx ==== */

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}>
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}>
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn("p-1", position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1")}>
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props} />
  );
}

function SelectItem({
  className,
  children,
  ...props
}) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}>
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props} />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...props}>
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...props}>
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}


/* ==== FILE: src\components\ui\separator.jsx ==== */

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props} />
  );
}

export { Separator }


/* ==== FILE: src\components\ui\sheet.jsx ==== */

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({
  ...props
}) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />;
}

function SheetTrigger({
  ...props
}) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />;
}

function SheetClose({
  ...props
}) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />;
}

function SheetPortal({
  ...props
}) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />;
}

function SheetOverlay({
  className,
  ...props
}) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props} />
  );
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}>
        {children}
        <SheetPrimitive.Close
          className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  );
}

function SheetHeader({
  className,
  ...props
}) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props} />
  );
}

function SheetFooter({
  className,
  ...props
}) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props} />
  );
}

function SheetTitle({
  className,
  ...props
}) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props} />
  );
}

function SheetDescription({
  className,
  ...props
}) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />
  );
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


/* ==== FILE: src\components\ui\sidebar.jsx ==== */

"use client";
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";
import { PanelLeftIcon } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

const SidebarContext = React.createContext(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

function SidebarProvider({
  defaultOpen = true,
  open: openProp,
  onOpenChange: setOpenProp,
  className,
  style,
  children,
  ...props
}) {
  const isMobile = useIsMobile()
  const [openMobile, setOpenMobile] = React.useState(false)

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen)
  const open = openProp ?? _open
  const setOpen = React.useCallback((value) => {
    const openState = typeof value === "function" ? value(open) : value
    if (setOpenProp) {
      setOpenProp(openState)
    } else {
      _setOpen(openState)
    }

    // This sets the cookie to keep the sidebar state.
    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
  }, [setOpenProp, open])

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile])

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault()
        toggleSidebar()
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [toggleSidebar])

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed"

  const contextValue = React.useMemo(() => ({
    state,
    open,
    setOpen,
    isMobile,
    openMobile,
    setOpenMobile,
    toggleSidebar,
  }), [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar])

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot="sidebar-wrapper"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style
            }
          }
          className={cn(
            "group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full",
            className
          )}
          {...props}>
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
}

function Sidebar({
  side = "left",
  variant = "sidebar",
  collapsible = "offcanvas",
  className,
  children,
  ...props
}) {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

  if (collapsible === "none") {
    return (
      <div
        data-slot="sidebar"
        className={cn(
          "bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col",
          className
        )}
        {...props}>
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-slot="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE
            }
          }
          side={side}>
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div
      className="group peer text-sidebar-foreground hidden md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar">
      {/* This is what handles the sidebar gap on desktop */}
      <div
        data-slot="sidebar-gap"
        className={cn(
          "relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon)"
        )} />
      <div
        data-slot="sidebar-container"
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className
        )}
        {...props}>
        <div
          data-sidebar="sidebar"
          data-slot="sidebar-inner"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm">
          {children}
        </div>
      </div>
    </div>
  );
}

function SidebarTrigger({
  className,
  onClick,
  ...props
}) {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn("size-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}>
      <PanelLeftIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
}

function SidebarRail({
  className,
  ...props
}) {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      data-sidebar="rail"
      data-slot="sidebar-rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex",
        "in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props} />
  );
}

function SidebarInset({
  className,
  ...props
}) {
  return (
    <main
      data-slot="sidebar-inset"
      className={cn(
        "bg-background relative flex w-full flex-1 flex-col",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2",
        className
      )}
      {...props} />
  );
}

function SidebarInput({
  className,
  ...props
}) {
  return (
    <Input
      data-slot="sidebar-input"
      data-sidebar="input"
      className={cn("bg-background h-8 w-full shadow-none", className)}
      {...props} />
  );
}

function SidebarHeader({
  className,
  ...props
}) {
  return (
    <div
      data-slot="sidebar-header"
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props} />
  );
}

function SidebarFooter({
  className,
  ...props
}) {
  return (
    <div
      data-slot="sidebar-footer"
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props} />
  );
}

function SidebarSeparator({
  className,
  ...props
}) {
  return (
    <Separator
      data-slot="sidebar-separator"
      data-sidebar="separator"
      className={cn("bg-sidebar-border mx-2 w-auto", className)}
      {...props} />
  );
}

function SidebarContent({
  className,
  ...props
}) {
  return (
    <div
      data-slot="sidebar-content"
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props} />
  );
}

function SidebarGroup({
  className,
  ...props
}) {
  return (
    <div
      data-slot="sidebar-group"
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props} />
  );
}

function SidebarGroupLabel({
  className,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      data-slot="sidebar-group-label"
      data-sidebar="group-label"
      className={cn(
        "text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props} />
  );
}

function SidebarGroupAction({
  className,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="sidebar-group-action"
      data-sidebar="group-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 md:after:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props} />
  );
}

function SidebarGroupContent({
  className,
  ...props
}) {
  return (
    <div
      data-slot="sidebar-group-content"
      data-sidebar="group-content"
      className={cn("w-full text-sm", className)}
      {...props} />
  );
}

function SidebarMenu({
  className,
  ...props
}) {
  return (
    <ul
      data-slot="sidebar-menu"
      data-sidebar="menu"
      className={cn("flex w-full min-w-0 flex-col gap-1", className)}
      {...props} />
  );
}

function SidebarMenuItem({
  className,
  ...props
}) {
  return (
    <li
      data-slot="sidebar-menu-item"
      data-sidebar="menu-item"
      className={cn("group/menu-item relative", className)}
      {...props} />
  );
}

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:p-0!",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function SidebarMenuButton({
  asChild = false,
  isActive = false,
  variant = "default",
  size = "default",
  tooltip,
  className,
  ...props
}) {
  const Comp = asChild ? Slot : "button"
  const { isMobile, state } = useSidebar()

  const button = (
    <Comp
      data-slot="sidebar-menu-button"
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props} />
  )

  if (!tooltip) {
    return button
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    }
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== "collapsed" || isMobile}
        {...tooltip} />
    </Tooltip>
  );
}

function SidebarMenuAction({
  className,
  asChild = false,
  showOnHover = false,
  ...props
}) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="sidebar-menu-action"
      data-sidebar="menu-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 md:after:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
        className
      )}
      {...props} />
  );
}

function SidebarMenuBadge({
  className,
  ...props
}) {
  return (
    <div
      data-slot="sidebar-menu-badge"
      data-sidebar="menu-badge"
      className={cn(
        "text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none",
        "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props} />
  );
}

function SidebarMenuSkeleton({
  className,
  showIcon = false,
  ...props
}) {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, [])

  return (
    <div
      data-slot="sidebar-menu-skeleton"
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}>
      {showIcon && (
        <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />
      )}
      <Skeleton
        className="h-4 max-w-(--skeleton-width) flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width
          }
        } />
    </div>
  );
}

function SidebarMenuSub({
  className,
  ...props
}) {
  return (
    <ul
      data-slot="sidebar-menu-sub"
      data-sidebar="menu-sub"
      className={cn(
        "border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props} />
  );
}

function SidebarMenuSubItem({
  className,
  ...props
}) {
  return (
    <li
      data-slot="sidebar-menu-sub-item"
      data-sidebar="menu-sub-item"
      className={cn("group/menu-sub-item relative", className)}
      {...props} />
  );
}

function SidebarMenuSubButton({
  asChild = false,
  size = "md",
  isActive = false,
  className,
  ...props
}) {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      data-slot="sidebar-menu-sub-button"
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props} />
  );
}

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


/* ==== FILE: src\components\ui\skeleton.jsx ==== */

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props} />
  );
}

export { Skeleton }


/* ==== FILE: src\components\ui\slider.jsx ==== */

"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}) {
  const _values = React.useMemo(() =>
    Array.isArray(value)
      ? value
      : Array.isArray(defaultValue)
        ? defaultValue
        : [min, max], [value, defaultValue, min, max])

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}>
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}>
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )} />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50" />
      ))}
    </SliderPrimitive.Root>
  );
}

export { Slider }


/* ==== FILE: src\components\ui\sonner.jsx ==== */

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner";

const Toaster = ({
  ...props
}) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)"
        }
      }
      {...props} />
  );
}

export { Toaster }


/* ==== FILE: src\components\ui\switch.jsx ==== */

"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}>
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )} />
    </SwitchPrimitive.Root>
  );
}

export { Switch }


/* ==== FILE: src\components\ui\table.jsx ==== */

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({
  className,
  ...props
}) {
  return (
    <div data-slot="table-container" className="relative w-full overflow-x-auto">
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props} />
    </div>
  );
}

function TableHeader({
  className,
  ...props
}) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props} />
  );
}

function TableBody({
  className,
  ...props
}) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props} />
  );
}

function TableFooter({
  className,
  ...props
}) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn("bg-muted/50 border-t font-medium [&>tr]:last:border-b-0", className)}
      {...props} />
  );
}

function TableRow({
  className,
  ...props
}) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props} />
  );
}

function TableHead({
  className,
  ...props
}) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props} />
  );
}

function TableCell({
  className,
  ...props
}) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props} />
  );
}

function TableCaption({
  className,
  ...props
}) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props} />
  );
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


/* ==== FILE: src\components\ui\tabs.jsx ==== */

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props} />
  );
}

function TabsList({
  className,
  ...props
}) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props} />
  );
}

function TabsTrigger({
  className,
  ...props
}) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props} />
  );
}

function TabsContent({
  className,
  ...props
}) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props} />
  );
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


/* ==== FILE: src\components\ui\textarea.jsx ==== */

import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({
  className,
  ...props
}) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props} />
  );
}

export { Textarea }


/* ==== FILE: src\components\ui\toggle-group.jsx ==== */

"use client";
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext({
  size: "default",
  variant: "default",
})

function ToggleGroup({
  className,
  variant,
  size,
  children,
  ...props
}) {
  return (
    <ToggleGroupPrimitive.Root
      data-slot="toggle-group"
      data-variant={variant}
      data-size={size}
      className={cn(
        "group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs",
        className
      )}
      {...props}>
      <ToggleGroupContext.Provider value={{ variant, size }}>
        {children}
      </ToggleGroupContext.Provider>
    </ToggleGroupPrimitive.Root>
  );
}

function ToggleGroupItem({
  className,
  children,
  variant,
  size,
  ...props
}) {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      data-slot="toggle-group-item"
      data-variant={context.variant || variant}
      data-size={context.size || size}
      className={cn(toggleVariants({
        variant: context.variant || variant,
        size: context.size || size,
      }), "min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l", className)}
      {...props}>
      {children}
    </ToggleGroupPrimitive.Item>
  );
}

export { ToggleGroup, ToggleGroupItem }


/* ==== FILE: src\components\ui\toggle.jsx ==== */

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Toggle({
  className,
  variant,
  size,
  ...props
}) {
  return (
    <TogglePrimitive.Root
      data-slot="toggle"
      className={cn(toggleVariants({ variant, size, className }))}
      {...props} />
  );
}

export { Toggle, toggleVariants }


/* ==== FILE: src\components\ui\tooltip.jsx ==== */

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}) {
  return (<TooltipPrimitive.Provider data-slot="tooltip-provider" delayDuration={delayDuration} {...props} />);
}

function Tooltip({
  ...props
}) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  );
}

function TooltipTrigger({
  ...props
}) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />;
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}>
        {children}
        <TooltipPrimitive.Arrow
          className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  );
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


/* ==== FILE: src\components\WhyUsCard.jsx ==== */

// src/components/WhyUsCard.jsx
import { Search, Shield, Zap } from 'lucide-react';


const iconMap = {
    Search,
    Shield,
    Zap,
};


const WhyUsCard = ({ icon, gradient, title, description }) => {
    const IconComponent = iconMap[icon];
    return (
        <div className="text-center">
            {/* Icon container with gradient background */}
            <div className={`w-20 h-20 bg-gradient-to-r ${gradient} rounded-full flex items-center justify-center mx-auto mb-6`}>
                <IconComponent className="h-10 w-10 text-white" />
            </div>
            {/* Title: Darker in light mode, much lighter in dark mode, slightly larger */}
            <h3 className="text-2xl font-semibold text-gray-900 dark:text-gray-100 mb-3">
                {title}
            </h3>
            {/* Description: Darker in light mode, significantly lighter in dark mode */}
            <p className="text-gray-600 dark:text-gray-300 leading-relaxed">
                {description}
            </p>
        </div>
    );
};


export default WhyUsCard;


/* ==== FILE: src\data\domains.js ==== */

// src/data/domains.js
export const domains = [
    'adularia.xyz', 'agentodyssey.com', 'astatic.xyz',
    'clifftop.xyz', 'dappnow.xyz', 'dappon.xyz', 'diffluence.xyz',
    'feckless.xyz', 'flavescent.xyz', 'gridgo.xyz', 'gridon.xyz',
    'i-am-diamond.com', 'iloveamerica.xyz', 'immure.xyz', 'inure.xyz',
    'ladyfacts.com', 'meliorism.xyz', 'scurbly.com', 'sibilant.xyz',
    'skitser.com', 'tykids.com', 'ululate.xyz', 'vocahua.com', 'nerdslife.com'
];

/* ==== FILE: src\data\tools.js ==== */

// src/data/tools.js
import pickaxeLogo from '../assets/pickaxe-logo.webp';
import aiagentLogo from '../assets/1740505172578-logo.png';

export const toolsData = [
    {
        id: 'pickaxe',
        href: 'https://pickaxe.co/?utm_campaign=AFFILIATE_KVDVZDO',
        logo: { type: 'image', src: pickaxeLogo, alt: 'Pickaxe.co logo' },
        category: 'No-Code Builder',
        categoryColor: 'bg-green-500',
        title: 'Pickaxe.co',
        subtitle: 'Build & Monetize AI Tools in Minutes',
        description:
            'Transform your expertise into profitable AI tools with drag-and-drop simplicity. No coding required – just upload your data and start earning.',
        features: [
            { icon: 'Wand2', text: 'Drag-and-drop prompt builder' },
            { icon: 'CreditCard', text: 'Built-in Stripe checkout' },
            { icon: 'Globe', text: 'One-click domains & white-label' },
        ],
        pricing: [
            { plan: 'Free', price: '$0/mo', note: '20% revenue share' },
            { plan: 'Pro', price: '$29/mo', note: '10% revenue share' },
        ],
        testimonial: {
            rating: 4.5,
            text: '"It was like moving from an old flip phone to my first iPhone"',
            source: '4.1/5 on AppSumo',
        },
        cta: 'Try Pickaxe.co',
    },
    {
        id: 'buildthatidea',
        href: 'https://buildthatidea.com/?via=build-now',
        logo: { type: 'icon', icon: 'Lightbulb', color: 'bg-blue-600' },
        category: 'AI Agent Builder',
        categoryColor: 'bg-purple-500',
        title: 'BuildThatIdea.com',
        subtitle: 'Launch an AI Agent in 60 Seconds',
        description:
            'Lightning-fast platform for creating GPT-based chat agents with built-in monetization. From idea to revenue in under a minute.',
        features: [
            { icon: 'Brain', text: 'Multiple LLMs (OpenAI, Claude)' },
            { icon: 'FileText', text: 'Upload PDFs, Docs, Notion' },
            { icon: 'CreditCard', text: 'Built-in Stripe + crypto checkout' },
        ],
        pricing: [
            { plan: 'Starter', price: '$19/mo', note: '1M tokens' },
            { plan: 'Pro', price: '$49/mo', note: '5M tokens' },
        ],
        testimonial: {
            icon: 'Rocket',
            text: '"Create custom AI applications in just a minute or two"',
            source: 'User hit $1k MRR in a week',
        },
        cta: 'Launch on BuildThatIdea',
    },
    {
        id: 'relayapp',
        href: 'https://www.relay.app/?via=buildit',
        logo: { type: 'icon', icon: 'Cog', color: 'bg-purple-600' },
        category: 'Automation Platform',
        categoryColor: 'bg-orange-500',
        title: 'Relay.app',
        subtitle: 'Human-in-the-Loop Automation',
        description:
            'Merge AI automation with human oversight. Perfect for workflows that need both speed and human judgment for critical decisions.',
        features: [
            { icon: 'Eye', text: 'Visual builder (simpler than Zapier)' },
            { icon: 'Puzzle', text: '100+ integrations (Gmail, Notion)' },
            { icon: 'ShieldCheck', text: 'SOC 2 compliant, GDPR-ready' },
        ],
        pricing: [
            { plan: 'Free', price: '$0/mo', note: '200 steps' },
            { plan: 'Pro', price: '$19/mo', note: '5,000+ steps' },
        ],
        testimonial: {
            rating: 5,
            text: '"Easy to use with a clean interface. Perfect for automating repetitive tasks with minimal setup."',
            source: '4.7/5 on G2 (60+ reviews)',
        },
        cta: 'Automate with Relay.app',
    }, // <-- comma added here
    {
        id: 'closebot',
        href: 'https://app.closebot.com/a?fpr=buildit',
        logo: { type: 'icon', icon: 'Bot', color: 'bg-cyan-600' },
        category: 'Customer Service Agent',
        categoryColor: 'bg-cyan-500',
        title: 'CloseBot.ai',
        subtitle: 'Automate Sales & Support Conversations',
        description:
            'An AI-powered agent designed to handle customer service inquiries, qualify leads, and automate sales conversations 24/7, freeing up your team for high-value tasks.',
        features: [
            { icon: 'MessagesSquare', text: '24/7 automated customer support' },
            { icon: 'UserCheck', text: 'Intelligent lead qualification & routing' },
            { icon: 'Zap', text: 'Seamless CRM & helpdesk integrations' },
        ],
        pricing: [
            { plan: 'Varies', price: 'Custom', note: 'Based on usage' },
            { plan: 'Demo', price: 'Available', note: 'Request a demo' },
        ],
        testimonial: {
            icon: 'TrendingUp',
            text: '"Leverage AI to close more deals and increase support efficiency."',
            source: 'Listed under "Customer Service Agents"[2]',
        },
        cta: 'Automate with CloseBot',
    }

];

/* ==== FILE: src\data\whyUs.js ==== */

// src/data/whyUs.js
export const whyUsData = [
    {
        icon: 'Search',
        gradient: 'from-blue-600 to-purple-600',
        title: 'Discover & Explore',
        description: 'Explore a growing collection of innovative AI agent tools, carefully curated to help you discover new possibilities.'
    },
    {
        icon: 'Shield',
        gradient: 'from-green-600 to-blue-600',
        title: 'Curated Selection',
        description: 'Each tool is hand-picked to ensure relevance and potential value, helping you find solutions with confidence.'
    },
    {
        icon: 'Zap',
        gradient: 'from-purple-600 to-pink-600',
        title: 'Future-Focused',
        description: 'Stay ahead with cutting-edge tools and features continuously added, empowering your journey with AI technology.'
    }
];


/* ==== FILE: src\hooks\use-mobile.js ==== */

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange);
  }, [])

  return !!isMobile
}


/* ==== FILE: src\lib\utils.js ==== */

import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}


/* ==== FILE: src\main.jsx ==== */

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


/* ==== FILE: src\pages\HomePage.jsx ==== */

// src/pages/HomePage.jsx
import React, { useRef } from 'react';
import HeroSection from '../sections/HeroSection';
import GameSection from '../sections/GameSection';
import ToolsSection from '../sections/ToolsSection';
import AboutSection from '../sections/AboutSection';
import DomainsSection from '../sections/DomainsSection';


const HomePage = () => {
    const toolsSectionRef = useRef(null);
    const gameSectionRef = useRef(null);


    const handleScrollToTools = (e) => {
        e.preventDefault();
        if (toolsSectionRef.current) {
            const navbarHeight = 64; // h-16
            const elementPosition = toolsSectionRef.current.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - navbarHeight;
            window.scrollTo({ top: offsetPosition, behavior: 'smooth' });
        }
    };


    const handleScrollToGame = (e) => {
        e.preventDefault();
        if (gameSectionRef.current) {
            const navbarHeight = 64;
            const elementPosition = gameSectionRef.current.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - navbarHeight;
            window.scrollTo({ top: offsetPosition, behavior: 'smooth' });
        }
    };


    return (
        <main className="text-gray-900 dark:text-white bg-white dark:bg-gray-900">
            <HeroSection onExploreClick={handleScrollToTools} onTryGameClick={handleScrollToGame} />
            <GameSection ref={gameSectionRef} />
            <ToolsSection ref={toolsSectionRef} />
            <AboutSection />
            <DomainsSection />
        </main>
    );
};


export default HomePage;


/* ==== FILE: src\sections\AboutSection.jsx ==== */

// src/sections/AboutSection.jsx
import { whyUsData } from '../data/whyUs';
import WhyUsCard from '../components/WhyUsCard';

const AboutSection = () => {
    return (
        <section id="about" className="py-20 bg-white dark:bg-gray-900">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="text-center mb-16">
                    <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
                        Agent Vanguard's Core Principles
                    </h2>
                    {/* Removed the second heading (p tag) */}
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                    {whyUsData.map((item, index) => (
                        <WhyUsCard key={index} {...item} />
                    ))}
                </div>
            </div>
        </section>
    );
};

export default AboutSection;


/* ==== FILE: src\sections\DomainsSection.jsx ==== */

// src/sections/DomainsSection.jsx
import { useState } from 'react';
import { ChevronDown, ChevronUp, Globe, Sparkles } from 'lucide-react';
import { domains } from '../data/domains'; // Assuming this import is correct


const DomainsSection = () => {
    const [domainsVisible, setDomainsVisible] = useState(false);


    return (
        <section
            id="domains"
            className="py-20 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950 relative overflow-hidden"
        >
            {/* Subtle background pattern for creativity (SVG overlay) */}
            <div className="absolute inset-0 opacity-5 pointer-events-none">
                <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
                    <defs>
                        <pattern id="premium-pattern" width="40" height="40" patternUnits="userSpaceOnUse">
                            <path d="M20 0 L20 40 M0 20 L40 20" stroke="#a5b4fc" strokeWidth="1" opacity="0.3" />
                            <circle cx="20" cy="20" r="2" fill="#a5b4fc" opacity="0.5" />
                        </pattern>
                    </defs>
                    <rect width="100%" height="100%" fill="url(#premium-pattern)" />
                </svg>
            </div>


            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
                <div className="text-center mb-16">
                    {/* Adjusted text size for mobile */}
                    <h2 className="text-2xl md:text-4xl font-bold text-gray-900 dark:text-indigo-100 mb-4 flex items-center justify-center gap-2">
                        <Sparkles className="h-8 w-8 text-yellow-500 dark:text-yellow-400 animate-pulse" />
                        My Domains Available for Sale on Saw.com
                    </h2>
                    <p className="text-md text-gray-600 dark:text-indigo-300 max-w-3xl mx-auto">
                        Unlock your brand's potential with these handpicked, premium domains. Perfect for AI, tech, and innovation projects.
                    </p>
                </div>


                {domainsVisible && (
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                        {domains.map((domain) => (
                            <div
                                key={domain}
                                className="group bg-white dark:bg-indigo-900/50 backdrop-blur-sm rounded-xl shadow-md dark:shadow-indigo-950/30 p-2 text-center transition-all duration-300 hover:scale-105 hover:shadow-xl"
                            >
                                <Globe className="h-4 w-4 mx-auto mb-1 text-blue-500 dark:text-blue-300 group-hover:rotate-12 transition-transform" />
                                <p className="font-mono text-gray-900 dark:text-indigo-100 text-sm">{domain}</p>
                                <p className="text-[10px] text-gray-500 dark:text-indigo-400 mt-1 opacity-0 group-hover:opacity-100 transition-opacity">
                                    Available via Saw.com
                                </p>
                            </div>
                        ))}
                    </div>
                )}


                <div className="text-center mt-8">
                    <button
                        onClick={() => setDomainsVisible(!domainsVisible)}
                        className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-500 dark:to-purple-500 text-white rounded-full font-semibold hover:from-blue-700 hover:to-purple-700 dark:hover:from-blue-600 dark:hover:to-purple-600 transition-all duration-300 hover:shadow-lg"
                    >
                        {domainsVisible ? 'Hide Domains' : 'Show Domains'}
                        {domainsVisible ? <ChevronUp className="ml-2" /> : <ChevronDown className="ml-2" />}
                    </button>
                </div>
            </div>
        </section>
    );
};


export default DomainsSection;


/* ==== FILE: src\sections\GameSection.jsx ==== */

// src/sections/GameSection.jsx
import React, { forwardRef, useState, useEffect } from 'react';
import { Target } from 'lucide-react';
import AgentVanguardGame from '@/components/AgentVanguardGame';


const GameSection = forwardRef((props, ref) => {
    // State to hold the current theme
    const [currentTheme, setCurrentTheme] = useState('dark'); // Default to 'dark' or your actual default

    useEffect(() => {
        // Function to detect theme from body/html class
        const detectTheme = () => {
            if (document.documentElement.classList.contains('dark')) {
                setCurrentTheme('dark');
            } else {
                setCurrentTheme('light');
            }
        };

        // Initial detection
        detectTheme();

        // Observe changes to the html class attribute if you have a theme toggle
        const observer = new MutationObserver(detectTheme);
        observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });

        return () => observer.disconnect(); // Clean up observer
    }, []);

    return (
        <section
            ref={ref}
            className="py-20 bg-gradient-to-r from-gray-100 to-white dark:from-slate-900 dark:via-purple-900 dark:to-slate-900 text-gray-900 dark:text-white"
        >
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="text-center mb-12">
                    <div className="inline-flex items-center justify-center w-16 h-16 bg-red-600 dark:bg-red-500 rounded-full mb-6 mx-auto">
                        <Target className="h-8 w-8 text-white" />
                    </div>
                    <h2 className="text-3xl font-bold mb-4">
                        Agent <span className="text-red-500 dark:text-red-400">Vanguard</span> Game
                    </h2>
                    <p className="text-l max-w-3xl mx-auto text-gray-600 dark:text-gray-300">
                        Navigate through the glitched simulation. Click, tap, or press space to fly!
                    </p>
                </div>

                <div className="w-full flex justify-center"> {/* Added flex and justify-center to help center the game container */}
                    {/* Pass the detected theme to AgentVanguardGame */}
                    <AgentVanguardGame theme={currentTheme} />
                </div>

                {/* Removed the "SIMULATION ACTIVE" div from here */}
            </div>
        </section>
    );
});

export default GameSection;


/* ==== FILE: src\sections\HeroSection.jsx ==== */

// HeroSection.jsx
import { ArrowDown } from 'lucide-react';


const HeroSection = ({ onExploreClick, onTryGameClick }) => {
    return (
        <section
            className="pt-10 md:pt-12 bg-gradient-normal dark:bg-gradient-dark"
        >
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10 md:py-12">
                <div className="text-center max-w-4xl mx-auto">
                    {/* Adjusted text sizes for mobile */}
                    <h1 className="text-4xl md:text-6xl font-extrabold mb-6 leading-tight text-gray-900 dark:text-white font-mono">
                        <span className="text-red-500">Stay</span> <span className="text-blue-400">comfortable</span><br />
                        <span className="text-xl md:text-3xl font-semibold text-gray-700 dark:text-gray-300 font-mono">The
                            <span className="text-purple-500"> agents</span> are <span className="text-green-500">ready</span> to do your job
                        </span>
                    </h1>
                    <p className="text-lg md:text-xl max-w-3xl mx-auto leading-relaxed mb-10 text-gray-700 dark:text-gray-300">
                        <strong>This page is just getting started.</strong><br />
                        We’re building a hub for the best AI agent tools, with fresh features coming soon.
                    </p>


                    <div className="flex flex-col sm:flex-row justify-center items-center gap-5 max-w-md mx-auto">
                        <button
                            onClick={onExploreClick}
                            type="button"
                            aria-label="Explore AI tools"
                            className="inline-flex items-center gap-3 px-8 py-4 bg-gray-900 bg-opacity-75 hover:bg-opacity-90 rounded-lg font-semibold transition-transform duration-300 hover:scale-105 text-white dark:bg-purple-800 dark:bg-opacity-50 dark:hover:bg-opacity-75"
                        >
                            <ArrowDown className="w-6 h-6 text-red-500" />
                            Explore Tools
                        </button>
                        <button
                            onClick={onTryGameClick}
                            type="button"
                            aria-label="Try the Agent Training Game"
                            className="inline-flex items-center gap-3 px-6 py-4 border-2 border-red-500 text-red-500 hover:bg-red-500 hover:text-white rounded-lg font-semibold transition-colors duration-300"
                        >
                            Try Our Homemade Agent Game
                        </button>
                    </div>
                </div>
            </div>
        </section>
    );
};


export default HeroSection;


/* ==== FILE: src\sections\ToolsSection.jsx ==== */

// src/sections/ToolsSection.jsx (updated for better dark mode colors)
import React from 'react';
import { toolsData } from '../data/tools';
import ToolCard from '../components/ToolCard';


const ToolsSection = React.forwardRef((props, ref) => (
    <section id="tools" ref={ref} className="py-20 bg-gray-50 dark:bg-indigo-950"> {/* Creative dark: indigo instead of black */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center mb-16">
                <h2 className="text-3xl font-bold text-gray-900 dark:text-indigo-100 mb-4">Recommended AI Tools</h2> {/* Light indigo for text */}
                <p className="text-lg text-gray-600 dark:text-indigo-300 max-w-3xl mx-auto"> {/* Soft indigo */}
                    A curated collection of AI-powered tools to help you automate workflows, build smarter solutions, and grow your business efficiently.
                </p>
            </div>
            {/* Changed lg:grid-cols-3 to lg:grid-cols-4 to allow 4 cards on large screens */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                {toolsData.map((tool) => (
                    <ToolCard key={tool.id} {...tool} />
                ))}
            </div>
        </div>
    </section>
));


ToolsSection.displayName = 'ToolsSection';


export default ToolsSection;


/* ==== FILE: tailwind.config.js ==== */

// tailwind.config.js
module.exports = {
    content: [
        "./index.html",
        "./src/**/*.{js,ts,jsx,tsx}",
    ],
    darkMode: 'class', // Keep this as 'class'
    theme: {
        extend: {
            backgroundImage: {
                // THIS IS YOUR LIGHT MODE GRADIENT
                'gradient-normal': 'linear-gradient(to bottom right, #f0f9ff, #fef2f2)', // light blue to light red
                // THIS IS YOUR DARK MODE GRADIENT
                'gradient-dark': 'linear-gradient(to right, #4c2d73, #6a329f)',
            },
        },
    },
    plugins: [],
};


/* ==== FILE: Unused-Code\ThreatNeutralizationGame.jsx ==== */

import React, { useState, useEffect, useCallback, useRef } from 'react';
import '../App.css'; // Assuming App.css contains necessary styles

// Custom useInterval hook to prevent frequent re-renders of setInterval
function useInterval(callback, delay) {
    const savedCallback = useRef(callback);

    // Remember the latest callback.
    useEffect(() => {
        savedCallback.current = callback;
    }, [callback]); // Only update if the callback itself changes

    // Set up the interval.
    useEffect(() => {
        function tick() {
            savedCallback.current();
        }
        if (delay !== null) {
            let id = setInterval(tick, delay);
            return () => clearInterval(id);
        }
    }, [delay]); // Only restart interval if delay changes
}

const UltimateTacticalAgentGame = () => {
    // --- CONSTANTS ---
    const GRID_SIZE = 8;
    const GAME_DURATION = 120;
    const INITIAL_LIVES = 5; // Reduced initial lives for balancing, will be modified by difficulty
    const BASE_PISTOL = { type: 'pistol', emoji: '🔫', damage: 1, range: 'line', speed: 300, description: 'Standard sidearm', color: '#6b7280', rarity: 'common' };

    const LEVEL_THEMES = [
        { name: 'Urban Warfare', background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%)', cellColor: '#2d3748', cellBorder: '#4a5568', adjacentColor: '#2b6cb0', playerColor: '#3182ce', threatColor: '#e53e3e', bulletColor: '#fbbf24', hazardColor: '#f97316' },
        { name: 'Desert Operations', background: 'linear-gradient(135deg, #fed7aa 0%, #fdba74 50%, #fb923c 100%)', cellColor: '#92400e', cellBorder: '#b45309', adjacentColor: '#d97706', playerColor: '#1e40af', threatColor: '#dc2626', bulletColor: '#f59e0b', hazardColor: '#ef4444' },
        { name: 'Arctic Infiltration', background: 'linear-gradient(135deg, #dbeafe 0%, #bfdbfe 50%, #93c5fd 100%)', cellColor: '#1e3a8a', cellBorder: '#3730a3', adjacentColor: '#1d4ed8', playerColor: '#1e40af', threatColor: '#dc2626', bulletColor: '#f59e0b', hazardColor: '#7c3aed' },
        { name: 'Space Station Alpha', background: 'linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%)', cellColor: '#4c1d95', cellBorder: '#5b21b6', adjacentColor: '#6d28d9', playerColor: '#8b5cf6', threatColor: '#ef4444', bulletColor: '#fbbf24', hazardColor: '#ec4899' }
    ];

    const WEAPON_TYPES = [
        BASE_PISTOL, // Base weapon
        { type: 'machinegun', emoji: '🪖', damage: 1, range: 'line', speed: 100, description: 'Rapid automatic fire', color: '#dc2626', rarity: 'common', duration: 8000 },
        { type: 'shotgun', emoji: '💥', damage: 2, range: 'spread', speed: 400, description: 'Close-range devastation', color: '#f97316', rarity: 'uncommon', duration: 10000 },
        { type: 'sniper', emoji: '🎯', damage: 3, range: 'piercing', speed: 600, description: 'Long-range precision', color: '#10b981', rarity: 'rare', duration: 12000 },
        { type: 'rocket', emoji: '🚀', damage: 4, range: 'explosive', speed: 500, description: 'Area destruction', color: '#ef4444', rarity: 'epic', duration: 15000 },
        { type: 'laser', emoji: '⚡', damage: 2, range: 'beam', speed: 100, description: 'Energy weapon', color: '#8b5cf6', rarity: 'rare', duration: 10000 }
    ];

    const POWERUP_TYPES = [
        { type: 'shield', emoji: '🛡️', color: '#8b5cf6', duration: 15000, description: 'Damage immunity', category: 'buff' },
        { type: 'rapidfire', emoji: '⚡', color: '#f59e0b', duration: 10000, description: '50% faster shooting', category: 'buff' },
        { type: 'multishot', emoji: '🎯', color: '#ef4444', duration: 12000, description: 'Shoot in all directions', category: 'buff' },
        { type: 'freeze', emoji: '❄️', color: '#06b6d4', duration: 8000, description: 'Freeze all enemies', category: 'buff' },
        { type: 'rage', emoji: '😡', color: '#dc2626', duration: 15000, description: 'Double damage & speed', category: 'buff' }
    ];

    const SUPER_WEAPONS = [
        { type: 'bomb', emoji: '💣', color: '#f97316', duration: 0, description: 'Massive explosion', category: 'super' },
        { type: 'nuke', emoji: '☢️', color: '#fbbf24', duration: 0, description: 'Clear entire screen', category: 'super' },
        { type: 'heal', emoji: '💚', color: '#10b981', duration: 0, description: 'Restore 2 lives', category: 'super' }
    ];

    const ENEMY_TYPES = [
        // Base values for enemies. Difficulty settings will modify these.
        // All attackType simplified to 'melee' for new damage system (no enemy bullets)
        // Adjusted base speeds and health for better balance
        { type: 'basic', emoji: '😈', health: 1, speed: 0.8, damage: 1, score: 100, color: '#dc2626', damageRadius: 1, attackCooldown: 2500, attackIndicatorColor: 'rgba(255, 0, 0, 0.3)' },
        { type: 'heavy', emoji: '🦾', health: 3, speed: 0.4, damage: 2, score: 250, color: '#374151', damageRadius: 1, attackCooldown: 3500, attackIndicatorColor: 'rgba(255, 0, 0, 0.4)' },
        { type: 'fast', emoji: '🏃‍♀️', health: 1, speed: 1.5, damage: 1, score: 150, color: '#f59e0b', damageRadius: 1, attackCooldown: 2000, attackIndicatorColor: 'rgba(255, 0, 0, 0.2)' },
        { type: 'sniper', emoji: '🔫', health: 2, speed: 0.2, damage: 1, score: 300, color: '#10b981', damageRadius: 3, attackCooldown: 4000, attackIndicatorColor: 'rgba(255, 255, 0, 0.3)' } // Sniper now has a visible range
    ];

    const MISSION_TYPES = [
        { type: 'survival', description: 'Survive for 2 minutes', icon: '⏱️', target: GAME_DURATION },
        { type: 'elimination', description: 'Eliminate 50 enemies', icon: '💀', target: 50 },
        { type: 'collection', description: 'Collect 10 power-ups', icon: '📦', target: 10 }
    ];

    // --- STATE ---
    const [gameState, setGameState] = useState('ready');
    const [playerPosition, setPlayerPosition] = useState({ x: 4, y: 4 });
    const [enemies, setEnemies] = useState([]);
    const [powerUps, setPowerUps] = useState([]);
    const [weaponPickups, setWeaponPickups] = useState([]);
    const [bullets, setBullets] = useState([]);
    const [particles, setParticles] = useState([]); // Used for hit effects, explosions etc.
    const [score, setScore] = useState(0);
    const [combo, setCombo] = useState(0);
    const [maxCombo, setMaxCombo] = useState(0);
    const [highScore, setHighScore] = useState(parseInt(localStorage.getItem('ultimateHighScore')) || 0);
    const [timeLeft, setTimeLeft] = useState(GAME_DURATION);
    const [lives, setLives] = useState(INITIAL_LIVES);
    const [level, setLevel] = useState(1);
    const [currentTheme, setCurrentTheme] = useState(LEVEL_THEMES[0]);
    const [activePowerUps, setActivePowerUps] = useState({}); // Example: { shield: 16788888888, rapidfire: 16788888999 }
    const [currentWeapon, setCurrentWeapon] = useState(BASE_PISTOL);
    const [currentWeaponEndTime, setCurrentWeaponEndTime] = useState(0); // For temporary weapons
    const [currentMission, setCurrentMission] = useState(MISSION_TYPES[0]);
    const [missionProgress, setMissionProgress] = useState(0);
    const [difficulty, setDifficulty] = useState('normal');
    const [enemiesKilled, setEnemiesKilled] = useState(0);
    const [lastHitTime, setLastHitTime] = useState(0);
    const [isDamaged, setIsDamaged] = useState(false);
    const [enemyAttackIndicators, setEnemyAttackIndicators] = useState([]); // To show threat areas

    // --- REFS (to get latest state in intervals to avoid stale closures) ---
    const playerPositionRef = useRef(playerPosition);
    const enemiesRef = useRef(enemies);
    const powerUpsRef = useRef(powerUps);
    const weaponPickupsRef = useRef(weaponPickups);
    const gameStateRef = useRef(gameState);
    const activePowerUpsRef = useRef(activePowerUps);
    const difficultyRef = useRef(difficulty); // To access latest difficulty in intervals
    const currentWeaponRef = useRef(currentWeapon); // For firing logic
    const livesRef = useRef(lives); // For game over check in damage
    // Update refs whenever state changes
    useEffect(() => { playerPositionRef.current = playerPosition; }, [playerPosition]);
    useEffect(() => { enemiesRef.current = enemies; }, [enemies]);
    useEffect(() => { powerUpsRef.current = powerUps; }, [powerUps]);
    useEffect(() => { weaponPickupsRef.current = weaponPickups; }, [weaponPickups]);
    useEffect(() => { gameStateRef.current = gameState; }, [gameState]);
    useEffect(() => { activePowerUpsRef.current = activePowerUps; }, [activePowerUps]);
    useEffect(() => { difficultyRef.current = difficulty; }, [difficulty]);
    useEffect(() => { currentWeaponRef.current = currentWeapon; }, [currentWeapon]);
    useEffect(() => { livesRef.current = lives; }, [lives]);


    const audioContextRef = useRef(null);
    const soundsRef = useRef({});

    // --- AUDIO SYSTEM ---
    const playTone = useCallback((frequency, duration, type = 'sine') => {
        if (!audioContextRef.current) return;
        try {
            const oscillator = audioContextRef.current.createOscillator();
            const gainNode = audioContextRef.current.createGain();
            oscillator.connect(gainNode);
            gainNode.connect(audioContextRef.current.destination);
            oscillator.frequency.value = frequency;
            oscillator.type = type;
            gainNode.gain.setValueAtTime(0.1, audioContextRef.current.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.001, audioContextRef.current.currentTime + duration);
            oscillator.start(audioContextRef.current.currentTime);
            oscillator.stop(audioContextRef.current.currentTime + duration);
        } catch (e) {
            console.error('Audio playback failed:', e);
        }
    }, []);

    useEffect(() => {
        try {
            const context = new (window.AudioContext || window['webkitAudioContext'])();
            audioContextRef.current = context;
            soundsRef.current = {
                shoot: () => playTone(800, 0.1, 'square'),
                hit: () => playTone(1200, 0.15, 'sawtooth'),
                explosion: () => playTone(200, 0.3, 'square'),
                powerup: () => playTone(1000, 0.2, 'sine'),
                damage: () => playTone(250, 0.2, 'triangle'), // Shorter, sharper damage sound
                weaponPickup: () => playTone(1500, 0.3, 'triangle'),
                gameOver: () => playTone(100, 1.0, 'sawtooth'), // Game over sound
                levelUp: () => playTone(2000, 0.2, 'sine'), // Level up sound
                enemyAttackWindup: () => playTone(400, 0.1, 'sine') // Sound for enemy preparing to attack
            };
        } catch (e) {
            console.error('Web Audio API not supported:', e);
        }
        return () => {
            if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
                audioContextRef.current.close();
            }
        };
    }, [playTone]);

    // --- UTILITY FUNCTIONS ---
    const getDifficultySettings = useCallback(() => {
        // Tuned for easier normal mode, and more distinct easy/hard modes
        switch (difficulty) {
            case 'easy': return {
                enemyLimit: 2,      // Fewer enemies
                spawnRate: 4000,    // Slower enemy spawns
                scoreMultiplier: 0.7,
                enemyHealthMod: 0.5, // Enemies have significantly less health
                enemySpeedMod: 0.6,  // Enemies move much slower
                enemyDamageMod: 0.5, // Enemies deal much less damage
                enemyAttackCooldownMod: 1.5, // Enemies attack slower
                initialLivesMod: 1.5 // More initial lives
            };
            case 'normal': return {
                enemyLimit: 4,      // Moderate enemies
                spawnRate: 2500,    // Moderate spawn rate
                scoreMultiplier: 1.0,
                enemyHealthMod: 1.0, // Standard enemy health
                enemySpeedMod: 1.0,  // Standard enemy speed
                enemyDamageMod: 1.0, // Standard enemy damage
                enemyAttackCooldownMod: 1.0, // Standard attack speed
                initialLivesMod: 1.0 // Standard initial lives
            };
            case 'hard': return {
                enemyLimit: 7,      // More enemies
                spawnRate: 1500,    // Faster enemy spawns
                scoreMultiplier: 1.5,
                enemyHealthMod: 1.5, // Enemies have more health
                enemySpeedMod: 1.2,  // Enemies move faster
                enemyDamageMod: 1.5, // Enemies deal more damage
                enemyAttackCooldownMod: 0.7, // Enemies attack faster
                initialLivesMod: 0.7 // Fewer initial lives
            };
            default: return { // Default to normal if somehow not set
                enemyLimit: 4, spawnRate: 2500, scoreMultiplier: 1.0,
                enemyHealthMod: 1.0, enemySpeedMod: 1.0, enemyDamageMod: 1.0,
                enemyAttackCooldownMod: 1.0, initialLivesMod: 1.0
            };
        }
    }, [difficulty]);

    const createParticles = useCallback((x, y, color, count = 8, sizeMin = 2, sizeMax = 4) => {
        const newParticles = [];
        for (let i = 0; i < count; i++) {
            const angle = Math.random() * Math.PI * 2;
            const speed = Math.random() * 2 + 1;
            newParticles.push({
                id: Date.now() + Math.random(),
                x: x + (Math.random() - 0.5) * 0.3,
                y: y + (Math.random() - 0.5) * 0.3,
                vx: Math.cos(angle) * speed,
                vy: Math.sin(angle) * speed,
                color,
                life: 1,
                decay: 0.03,
                size: Math.random() * (sizeMax - sizeMin) + sizeMin
            });
        }
        setParticles(prev => [...prev, ...newParticles]);
    }, []);

    const generateEntityPosition = useCallback((excludePositions) => {
        const maxAttempts = 50;
        for (let attempts = 0; attempts < maxAttempts; attempts++) {
            const x = Math.floor(Math.random() * GRID_SIZE);
            const y = Math.floor(Math.random() * GRID_SIZE);

            const isOccupied = excludePositions.some(pos => pos.x === x && pos.y === y);
            if (!isOccupied) {
                return { x, y };
            }
        }
        return null; // Should ideally not happen on an 8x8 grid with few entities
    }, []);

    // --- CORE GAME LOGIC ---
    const fireWeapon = useCallback((targetX, targetY) => {
        if (gameState !== 'playing') return;

        soundsRef.current?.shoot();
        const damageMultiplier = activePowerUpsRef.current.rage ? 2 : 1;
        const actualDamage = currentWeaponRef.current.damage * damageMultiplier;

        const newBullets = [];

        // Main bullet
        newBullets.push({
            id: Date.now() + Math.random(),
            x: playerPositionRef.current.x,
            y: playerPositionRef.current.y,
            targetX,
            targetY,
            damage: actualDamage,
            speed: currentWeaponRef.current.speed,
            type: currentWeaponRef.current.type
        });

        // Multishot power-up
        if (activePowerUpsRef.current.multishot) {
            const directions = [
                { dx: 0, dy: 1 }, { dx: 0, dy: -1 },
                { dx: 1, dy: 0 }, { dx: -1, dy: 0 },
                { dx: 1, dy: 1 }, { dx: -1, dy: -1 },
                { dx: 1, dy: -1 }, { dx: -1, dy: 1 }
            ]; // All 8 directions
            directions.forEach((dir, index) => {
                newBullets.push({
                    id: Date.now() + Math.random() + index + 0.1, // Ensure unique ID
                    x: playerPositionRef.current.x,
                    y: playerPositionRef.current.y,
                    targetX: playerPositionRef.current.x + dir.dx * GRID_SIZE, // Shoot to edge of grid
                    targetY: playerPositionRef.current.y + dir.dy * GRID_SIZE,
                    damage: actualDamage,
                    speed: currentWeaponRef.current.speed,
                    type: currentWeaponRef.current.type
                });
            });
        }

        setBullets(prev => [...prev, ...newBullets]);
    }, [gameState]); // Removed playerPosition, currentWeapon, activePowerUps from dependencies, using refs

    const startGame = useCallback(() => {
        setGameState('playing');
        setPlayerPosition({ x: 4, y: 4 });

        const randomMission = MISSION_TYPES[Math.floor(Math.random() * MISSION_TYPES.length)];
        setCurrentMission(randomMission);
        setMissionProgress(0);

        const diffSettings = getDifficultySettings();

        // Create initial enemies (reduced initial count for better starting experience)
        const initialEnemies = [];
        const occupiedPositions = [{ x: 4, y: 4 }]; // Player position
        for (let i = 0; i < Math.min(diffSettings.enemyLimit, 2); i++) { // Start with max 2 enemies
            const enemyType = ENEMY_TYPES[Math.floor(Math.random() * ENEMY_TYPES.length)];
            const position = generateEntityPosition(occupiedPositions);
            if (position) {
                initialEnemies.push({
                    ...position,
                    ...enemyType,
                    id: `enemy-${Date.now()}-${i}`,
                    health: Math.ceil(enemyType.health * diffSettings.enemyHealthMod),
                    maxHealth: Math.ceil(enemyType.health * diffSettings.enemyHealthMod),
                    damage: Math.ceil(enemyType.damage * diffSettings.enemyDamageMod),
                    speed: enemyType.speed * diffSettings.enemySpeedMod,
                    attackCooldown: enemyType.attackCooldown * diffSettings.enemyAttackCooldownMod,
                    lastAttack: 0,
                    attacking: false // New state for attack animation/indicator
                });
                occupiedPositions.push(position);
            }
        }
        setEnemies(initialEnemies);

        // Reset all other states
        setPowerUps([]);
        setWeaponPickups([]);
        setBullets([]);
        setParticles([]);
        setScore(0);
        setCombo(0);
        setMaxCombo(0);
        setTimeLeft(GAME_DURATION);
        setLives(Math.floor(INITIAL_LIVES * diffSettings.initialLivesMod)); // Apply initial lives mod
        setLevel(1);
        setCurrentTheme(LEVEL_THEMES[0]); // Always start with first theme, can be dynamic later
        setCurrentWeapon(BASE_PISTOL);
        setCurrentWeaponEndTime(0);
        setActivePowerUps({});
        setEnemiesKilled(0);
        setEnemyAttackIndicators([]);
    }, [generateEntityPosition, getDifficultySettings]);

    const handleCellClick = useCallback((x, y) => { // Removed event param as it's not used
        if (gameState !== 'playing') return;

        // Check for enemy at clicked position
        const enemy = enemiesRef.current.find(e => e.x === x && e.y === y);
        if (enemy) {
            fireWeapon(x, y);
            return;
        }

        // Check for weapon pickup
        const weaponPickup = weaponPickupsRef.current.find(w => w.x === x && w.y === y);
        if (weaponPickup) {
            soundsRef.current?.weaponPickup();
            const pickedUpWeaponType = WEAPON_TYPES.find(w => w.type === weaponPickup.weaponType);

            if (pickedUpWeaponType && pickedUpWeaponType.type !== BASE_PISTOL.type) {
                setCurrentWeapon(pickedUpWeaponType);
                const duration = pickedUpWeaponType.duration || (Math.floor(Math.random() * (20 - 5 + 1) + 5) * 1000); // Use weapon's defined duration or random
                setCurrentWeaponEndTime(Date.now() + duration);
            }
            setWeaponPickups(prev => prev.filter(w => w.id !== weaponPickup.id));
            createParticles(x, y, pickedUpWeaponType?.color || '#fbbf24', 8);
            return;
        }

        // Check for power-up
        const powerUp = powerUpsRef.current.find(p => p.x === x && p.y === y);
        if (powerUp) {
            soundsRef.current?.powerup();
            if (powerUp.category === 'super') {
                if (powerUp.type === 'bomb') {
                    // Bomb affects adjacent enemies
                    setEnemies(prevEnemies => {
                        const affectedEnemies = prevEnemies.filter(e => Math.abs(e.x - x) <= 1 && Math.abs(e.y - y) <= 1);
                        affectedEnemies.forEach(e => createParticles(e.x, e.y, '#f97316', 15, 3, 6)); // Explosion particles for each affected enemy
                        if (affectedEnemies.length > 0) soundsRef.current?.explosion();
                        return prevEnemies.filter(e => !(Math.abs(e.x - x) <= 1 && Math.abs(e.y - y) <= 1)); // Remove affected enemies
                    });
                    if (currentMission.type === 'elimination') setMissionProgress(prev => prev + powerUp.target || 3); // Bomb eliminates a few enemies
                } else if (powerUp.type === 'nuke') {
                    setEnemies([]); // Clear all enemies
                    soundsRef.current?.explosion();
                    // Particles from center of explosion
                    createParticles(x, y, '#fbbf24', 30, 4, 8);
                    if (currentMission.type === 'elimination') setMissionProgress(prev => prev + powerUp.target || 10); // Nuke eliminates many enemies
                } else if (powerUp.type === 'heal') {
                    setLives(prev => Math.min(INITIAL_LIVES * getDifficultySettings().initialLivesMod, prev + 2)); // Max lives depends on difficulty
                }
            } else {
                setActivePowerUps(prev => ({ ...prev, [powerUp.type]: Date.now() + powerUp.duration }));
            }
            setPowerUps(prev => prev.filter(p => p.id !== powerUp.id));
            createParticles(x, y, powerUp.color, 8);
            if (currentMission.type === 'collection') setMissionProgress(prev => prev + 1);
            return;
        }

        // Move player if cell is empty AND is adjacent to current player position (new rule for tactical movement)
        const dx = Math.abs(x - playerPositionRef.current.x);
        const dy = Math.abs(y - playerPositionRef.current.y);

        if ((dx <= 1 && dy <= 1 && (dx > 0 || dy > 0)) && // Must be adjacent and actually moving
            !enemiesRef.current.some(e => e.x === x && e.y === y) &&
            !powerUpsRef.current.some(p => p.x === x && p.y === y) &&
            !weaponPickupsRef.current.some(w => w.x === x && w.y === y)) {
            setPlayerPosition({ x, y });
        }
    }, [gameState, createParticles, getDifficultySettings]); // Using refs, so dependencies simplified


    // --- GAME LOOP EFFECTS ---

    useInterval(() => { // Enemy Movement
        if (gameStateRef.current !== 'playing' || activePowerUpsRef.current.freeze) return;

        setEnemies(prevEnemies => prevEnemies.map(enemy => {
            // enemy.speed already contains the difficulty modification from startGame
            if (Math.random() < enemy.speed) { // Probability-based movement
                let newX = enemy.x;
                let newY = enemy.y;

                const dx = playerPositionRef.current.x - enemy.x;
                const dy = playerPositionRef.current.y - enemy.y;

                // Simple movement towards player, avoids moving onto other enemies/objects
                const possibleMoves = [];
                if (dx > 0) possibleMoves.push({ x: enemy.x + 1, y: enemy.y });
                if (dx < 0) possibleMoves.push({ x: enemy.x - 1, y: enemy.y });
                if (dy > 0) possibleMoves.push({ x: enemy.x, y: enemy.y + 1 });
                if (dy < 0) possibleMoves.push({ x: enemy.x, y: enemy.y - 1 });

                // Add diagonal moves for more dynamic movement
                if (dx > 0 && dy > 0) possibleMoves.push({ x: enemy.x + 1, y: enemy.y + 1 });
                if (dx < 0 && dy < 0) possibleMoves.push({ x: enemy.x - 1, y: enemy.y - 1 });
                if (dx > 0 && dy < 0) possibleMoves.push({ x: enemy.x + 1, y: enemy.y - 1 });
                if (dx < 0 && dy > 0) possibleMoves.push({ x: enemy.x - 1, y: enemy.y + 1 });


                // Filter valid moves (within grid, not occupied by other enemies/player)
                const validMoves = possibleMoves.filter(move =>
                    move.x >= 0 && move.x < GRID_SIZE &&
                    move.y >= 0 && move.y < GRID_SIZE &&
                    !(move.x === playerPositionRef.current.x && move.y === playerPositionRef.current.y) &&
                    !prevEnemies.some(e => e.id !== enemy.id && e.x === move.x && e.y === move.y) // Don't move into other enemies
                );

                if (validMoves.length > 0) {
                    // Prioritize moves that reduce distance to player
                    validMoves.sort((a, b) => {
                        const distA = Math.hypot(a.x - playerPositionRef.current.x, a.y - playerPositionRef.current.y);
                        const distB = Math.hypot(b.x - playerPositionRef.current.x, b.y - playerPositionRef.current.y);
                        return distA - distB;
                    });
                    newX = validMoves[0].x;
                    newY = validMoves[0].y;
                }

                return { ...enemy, x: newX, y: newY };
            }
            return enemy;
        }));
    }, gameState === 'playing' ? 800 : null); // Enemy movement checks

    useInterval(() => { // Enemy Spawning
        if (gameStateRef.current !== 'playing') return;
        const diffSettings = getDifficultySettings(); // Re-fetch current settings

        setEnemies(prevEnemies => {
            if (prevEnemies.length >= diffSettings.enemyLimit) return prevEnemies;

            const occupiedPositions = [...prevEnemies, ...powerUpsRef.current, ...weaponPickupsRef.current, playerPositionRef.current];
            const position = generateEntityPosition(occupiedPositions);

            if (position) {
                const enemyType = ENEMY_TYPES[Math.floor(Math.random() * ENEMY_TYPES.length)];
                const newEnemy = {
                    ...position,
                    ...enemyType,
                    id: `enemy-${Date.now()}-${Math.random()}`,
                    health: Math.ceil(enemyType.health * diffSettings.enemyHealthMod),
                    maxHealth: Math.ceil(enemyType.health * diffSettings.enemyHealthMod),
                    damage: Math.ceil(enemyType.damage * diffSettings.enemyDamageMod),
                    speed: enemyType.speed * diffSettings.enemySpeedMod,
                    attackCooldown: enemyType.attackCooldown * diffSettings.enemyAttackCooldownMod,
                    lastAttack: 0,
                    attacking: false // Initialize attack state
                };
                return [...prevEnemies, newEnemy];
            }
            return prevEnemies;
        });
    }, gameState === 'playing' ? getDifficultySettings().spawnRate : null); // Use dynamic spawnRate

    useInterval(() => { // Weapon Pickup Spawning
        if (gameStateRef.current !== 'playing') return;

        setWeaponPickups(prevWeapons => {
            if (prevWeapons.length >= 2) return prevWeapons; // Limit to 2 weapons on map

            const occupiedPositions = [...enemiesRef.current, ...powerUpsRef.current, ...prevWeapons, playerPositionRef.current];
            const position = generateEntityPosition(occupiedPositions);

            if (position) {
                const availableWeapons = WEAPON_TYPES.filter(w => w.type !== BASE_PISTOL.type);
                if (availableWeapons.length === 0) return prevWeapons; // No weapons to spawn

                const weaponType = availableWeapons[Math.floor(Math.random() * availableWeapons.length)];
                return [...prevWeapons, {
                    ...position,
                    id: `weapon-${Date.now()}`,
                    weaponType: weaponType.type,
                    emoji: weaponType.emoji,
                    color: weaponType.color,
                    rarity: weaponType.rarity
                }];
            }
            return prevWeapons;
        });
    }, gameState === 'playing' ? 6000 : null);

    useInterval(() => { // Power-up Spawning
        if (gameStateRef.current !== 'playing') return;

        setPowerUps(prevPowerUps => {
            if (prevPowerUps.length >= 3) return prevPowerUps; // Limit to 3 power-ups on map

            const occupiedPositions = [...enemiesRef.current, ...weaponPickupsRef.current, ...prevPowerUps, playerPositionRef.current];
            const position = generateEntityPosition(occupiedPositions);

            if (position) {
                const isSuper = Math.random() < 0.2; // 20% chance for super power-up
                const powerUpArray = isSuper ? SUPER_WEAPONS : POWERUP_TYPES;
                if (powerUpArray.length === 0) return prevPowerUps; // No power-ups to spawn

                const powerUpType = powerUpArray[Math.floor(Math.random() * powerUpArray.length)];

                return [...prevPowerUps, {
                    ...position,
                    ...powerUpType,
                    id: `powerup-${Date.now()}`
                }];
            }
            return prevPowerUps;
        });
    }, gameState === 'playing' ? 8000 : null);

    useInterval(() => { // Enemy Attacks (All enemies now "melee" for player damage)
        if (gameStateRef.current !== 'playing' || activePowerUpsRef.current.shield) return;

        const now = Date.now();
        const newAttackIndicators = []; // To store temporary attack indicators

        setEnemies(prevEnemies => prevEnemies.map(enemy => {
            const distance = Math.max(Math.abs(enemy.x - playerPositionRef.current.x), Math.abs(enemy.y - playerPositionRef.current.y));
            const withinRange = distance <= enemy.damageRadius;

            // If enemy is ready to attack and within range
            if (withinRange && (now - enemy.lastAttack) >= enemy.attackCooldown) {
                // Set enemy to 'attacking' state for a brief period to show windup
                soundsRef.current?.enemyAttackWindup(); // Play a sound cue for attack windup
                newAttackIndicators.push({
                    id: enemy.id,
                    x: enemy.x,
                    y: enemy.y,
                    radius: enemy.damageRadius,
                    color: enemy.attackIndicatorColor,
                    endTime: now + 500 // Indicator shows for 500ms before damage
                });

                // Schedule the actual damage after a short delay to match indicator
                setTimeout(() => {
                    // Re-check conditions as state might have changed
                    if (gameStateRef.current === 'playing' && !activePowerUpsRef.current.shield && livesRef.current > 0) {
                        const currentDistance = Math.max(Math.abs(enemy.x - playerPositionRef.current.x), Math.abs(enemy.y - playerPositionRef.current.y));
                        if (currentDistance <= enemy.damageRadius) { // Player must still be in range
                            soundsRef.current?.damage();
                            setIsDamaged(true); // Trigger screen shake
                            setTimeout(() => setIsDamaged(false), 300); // Stop screen shake

                            setLives(prevLives => {
                                const newLives = Math.max(0, prevLives - enemy.damage);
                                if (newLives <= 0) {
                                    setGameState('lost'); // Game over
                                    soundsRef.current?.gameOver();
                                }
                                return newLives;
                            });
                            setCombo(0); // Reset combo on hit
                            createParticles(playerPositionRef.current.x, playerPositionRef.current.y, '#ef4444', 10); // Damage particles
                        }
                    }
                }, 500); // Damage applies after 500ms

                return { ...enemy, lastAttack: now, attacking: true }; // Mark as attacking
            }
            // If not attacking, ensure 'attacking' state is false
            return { ...enemy, attacking: false };
        }));
        // Update attack indicators
        setEnemyAttackIndicators(prev => [...prev.filter(ind => ind.endTime > now), ...newAttackIndicators]);
    }, gameState === 'playing' ? 250 : null); // Check for attacks more frequently to allow for windup animation

    useInterval(() => { // Player Bullet Movement and Collision
        if (gameStateRef.current !== 'playing') return;

        setBullets(prevBullets => {
            const newBullets = [];
            const enemiesHitThisTick = new Set(); // To ensure one enemy is hit once per bullet tick

            prevBullets.forEach(bullet => {
                let currentX = bullet.x;
                let currentY = bullet.y;

                const dx = bullet.targetX - currentX;
                const dy = bullet.targetY - currentY;

                const distance = Math.hypot(dx, dy);
                const stepSize = (bullet.speed / 1000) * 0.5; // Scale step size by bullet speed

                if (distance > stepSize) {
                    currentX += (dx / distance) * stepSize;
                    currentY += (dy / distance) * stepSize;
                } else {
                    currentX = bullet.targetX;
                    currentY = bullet.targetY;
                }

                // Bullet collision check
                const hitEnemy = enemiesRef.current.find(enemy =>
                    enemy.health > 0 &&
                    !enemiesHitThisTick.has(enemy.id) && // Only hit if not already hit by another bullet this tick
                    Math.round(currentX) === enemy.x && Math.round(currentY) === enemy.y
                );

                if (hitEnemy) {
                    soundsRef.current?.hit();
                    enemiesHitThisTick.add(hitEnemy.id); // Mark enemy as hit

                    const now = Date.now();
                    setLastHitTime(now); // Update last hit time for combo
                    setCombo(prevCombo => {
                        const newCombo = (now - lastHitTime < 3000) ? prevCombo + 1 : 1;
                        setMaxCombo(max => Math.max(max, newCombo));
                        return newCombo;
                    });

                    setEnemies(prevEnemies => prevEnemies.map(enemy => {
                        if (enemy.id === hitEnemy.id) {
                            const newHealth = enemy.health - bullet.damage;
                            if (newHealth <= 0) {
                                setScore(prev => prev + Math.floor(enemy.score * getDifficultySettings().scoreMultiplier));
                                setEnemiesKilled(prev => prev + 1);
                                if (currentMission.type === 'elimination') setMissionProgress(prev => prev + 1);
                                createParticles(enemy.x, enemy.y, currentTheme.bulletColor, 10);
                                return null; // Remove enemy
                            }
                            return { ...enemy, health: newHealth };
                        }
                        return enemy;
                    }).filter(Boolean)); // Filter out null (defeated enemies)

                    // Sniper and Explosive bullets pass through or explode
                    if (bullet.type === 'sniper' || bullet.type === 'rocket' || bullet.type === 'laser') {
                        // For piercing/explosive, continue moving the bullet but deal damage
                        if (bullet.type === 'rocket') {
                            // Rocket: small explosion radius
                            setEnemies(prevEnemies => {
                                const affectedEnemies = prevEnemies.filter(e => Math.abs(e.x - Math.round(currentX)) <= 1 && Math.abs(e.y - Math.round(currentY)) <= 1 && e.id !== hitEnemy.id);
                                affectedEnemies.forEach(e => {
                                    const newHealth = e.health - bullet.damage;
                                    if (newHealth <= 0) {
                                        setScore(prev => prev + Math.floor(e.score * getDifficultySettings().scoreMultiplier));
                                        setEnemiesKilled(prev => prev + 1);
                                        if (currentMission.type === 'elimination') setMissionProgress(prev => prev + 1);
                                        createParticles(e.x, e.y, '#f97316', 12);
                                        return null;
                                    }
                                    return { ...e, health: newHealth };
                                });
                                createParticles(Math.round(currentX), Math.round(currentY), '#f97316', 20, 3, 7); // Explosion particles
                                soundsRef.current?.explosion();
                                return prevEnemies.map(e => {
                                    if (affectedEnemies.some(ae => ae.id === e.id)) {
                                        const updated = affectedEnemies.find(ae => ae.id === e.id);
                                        return updated === null ? null : updated; // Apply health changes or null
                                    }
                                    return e;
                                }).filter(Boolean);
                            });
                        }
                        newBullets.push({ ...bullet, x: currentX, y: currentY }); // Continue bullet path
                    } else {
                        // Standard bullets disappear on hit
                        return;
                    }
                }

                // If bullet goes out of bounds
                if (currentX < 0 || currentX >= GRID_SIZE || currentY < 0 || currentY >= GRID_SIZE) {
                    return; // Bullet disappears
                }

                newBullets.push({ ...bullet, x: currentX, y: currentY });
            });

            return newBullets;
        });
    }, gameState === 'playing' ? 25 : null); // Faster bullet update for smoother movement and more precise hits

    useInterval(() => { // Game Timer
        if (gameStateRef.current !== 'playing') return;

        setTimeLeft(prev => {
            if (prev <= 1) {
                setGameState('won');
                const finalScore = Math.floor(score * 1.5); // Bonus for winning
                setScore(finalScore);
                setHighScore(prevHigh => {
                    const newHigh = Math.max(prevHigh, finalScore);
                    localStorage.setItem('ultimateHighScore', newHigh.toString());
                    return newHigh;
                });
                soundsRef.current?.levelUp(); // Play a win sound
                return 0;
            }
            // Mission progress for survival is based on time left
            if (currentMission.type === 'survival') setMissionProgress(prev => prev + 1); // Increment for each second survived
            return prev - 1;
        });
    }, gameState === 'playing' ? 1000 : null);

    useInterval(() => { // Particle Animation
        if (gameStateRef.current !== 'playing') return;

        setParticles(prev => prev.map(p => ({
            ...p,
            x: p.x + p.vx * 0.1,
            y: p.y + p.vy * 0.1,
            life: p.life - p.decay
        })).filter(p => p.life > 0));
    }, gameState === 'playing' ? 50 : null);

    // Power-up and Weapon Expiration useEffect
    useEffect(() => {
        const now = Date.now();
        const timers = Object.entries(activePowerUps).map(([type, endTime]) => {
            const timeLeft = endTime - now;
            if (timeLeft > 0) {
                return setTimeout(() => {
                    setActivePowerUps(prev => {
                        const newPowerUps = { ...prev };
                        delete newPowerUps[type];
                        return newPowerUps;
                    });
                }, timeLeft);
            }
            return null;
        }).filter(Boolean);

        // Handle temporary weapon expiry
        if (currentWeapon.type !== BASE_PISTOL.type && currentWeaponEndTime > 0 && now >= currentWeaponEndTime) {
            setCurrentWeapon(BASE_PISTOL);
            setCurrentWeaponEndTime(0);
        }

        return () => timers.forEach(timer => clearTimeout(timer));
    }, [activePowerUps, currentWeapon, currentWeaponEndTime]);

    // --- RENDERING ---
    const renderCell = useCallback((x, y) => {
        const isPlayer = playerPosition.x === x && playerPosition.y === y;
        const enemy = enemies.find(e => e.x === x && e.y === y);
        const powerUp = powerUps.find(p => p.x === x && p.y === y);
        const weaponPickup = weaponPickups.find(w => w.x === x && w.y === y);
        const bullet = bullets.find(b => Math.round(b.x) === x && Math.round(b.y) === y);
        const cellParticles = particles.filter(p => Math.round(p.x) === x && Math.round(p.y) === y);
        const attackIndicator = enemyAttackIndicators.find(ind =>
            Math.abs(x - ind.x) <= ind.radius && Math.abs(y - ind.y) <= ind.radius
        );

        const baseStyle = {
            width: '90%', height: '90%', borderRadius: '50%',
            display: 'flex', alignItems: 'center', justifyContent: 'center',
            color: 'white', fontSize: 'clamp(14px, 3vw, 22px)',
            position: 'relative', zIndex: 2, fontWeight: 'bold'
        };

        if (isPlayer) {
            let playerEmoji = '🕵️';
            if (activePowerUps.shield) playerEmoji = '🛡️';
            if (activePowerUps.rage) playerEmoji = '😡';

            return (
                <div style={{
                    ...baseStyle,
                    backgroundColor: activePowerUps.shield ? '#8b5cf6' : activePowerUps.rage ? '#dc2626' : currentTheme.playerColor,
                    animation: 'pulse 2s infinite',
                    boxShadow: activePowerUps.shield ? '0 0 20px #8b5cf6' : 'none'
                }}>
                    <span role="img" aria-label="player">{playerEmoji}</span>
                </div>
            );
        }
        if (enemy) {
            const healthPercent = enemy.health / enemy.maxHealth;
            return (
                <div style={{ position: 'relative', width: '100%', height: '100%' }}>
                    <div style={{
                        ...baseStyle,
                        backgroundColor: activePowerUps.freeze ? '#06b6d4' : enemy.color,
                        cursor: 'pointer',
                        fontSize: 'clamp(16px, 3.5vw, 24px)'
                    }}>
                        <span role="img" aria-label="enemy">{enemy.emoji}</span>
                    </div>
                    {healthPercent < 1 && (
                        <div style={{
                            position: 'absolute', bottom: '-8px', left: '5%',
                            width: '90%', height: '6px',
                            backgroundColor: 'rgba(0,0,0,0.8)',
                            borderRadius: '3px', border: '1px solid white', zIndex: 3
                        }}>
                            <div style={{
                                width: `${healthPercent * 100}%`, height: '100%',
                                backgroundColor: healthPercent > 0.6 ? '#10b981' : healthPercent > 0.3 ? '#f59e0b' : '#ef4444',
                                borderRadius: '2px', transition: 'width 0.3s ease'
                            }} />
                        </div>
                    )}
                </div>
            );
        }

        if (weaponPickup) {
            return (
                <div style={{
                    ...baseStyle,
                    backgroundColor: weaponPickup.color,
                    cursor: 'pointer',
                    border: '2px solid white',
                    borderRadius: '15%',
                    fontSize: 'clamp(20px, 4.5vw, 28px)',
                    animation: 'pulse 2s infinite'
                }}>
                    <span role="img" aria-label="weapon">{weaponPickup.emoji}</span>
                </div>
            );
        }

        if (powerUp) {
            const isSuper = powerUp.category === 'super';
            return (
                <div style={{
                    ...baseStyle,
                    backgroundColor: powerUp.color,
                    cursor: 'pointer',
                    border: isSuper ? '3px solid gold' : '2px solid white',
                    borderRadius: '20%',
                    fontSize: 'clamp(18px, 4vw, 26px)',
                    animation: 'pulse 1.5s infinite'
                }}>
                    <span role="img" aria-label="powerup">{powerUp.emoji}</span>
                </div>
            );
        }

        if (bullet) {
            return (
                <div style={{
                    width: '60%', height: '60%',
                    backgroundColor: currentTheme.bulletColor,
                    borderRadius: '50%',
                    zIndex: 1,
                    // Add a pulse animation for bullets for better visibility
                    animation: 'pulse-bullet 0.5s infinite alternate'
                }} />
            );
        }

        if (cellParticles.length > 0) {
            return (
                <div style={{ position: 'relative', width: '100%', height: '100%', pointerEvents: 'none' }}>
                    {cellParticles.map(p => (
                        <div key={p.id} style={{
                            position: 'absolute',
                            left: `${((p.x % 1) * 100).toFixed(2)}%`,
                            top: `${((p.y % 1) * 100).toFixed(2)}%`,
                            width: `${p.size}px`, height: `${p.size}px`,
                            backgroundColor: p.color,
                            borderRadius: '50%',
                            opacity: p.life,
                            zIndex: 3
                        }} />
                    ))}
                </div>
            );
        }
        // Render enemy attack indicator background if present
        if (attackIndicator) {
            return (
                <div style={{
                    position: 'absolute',
                    top: 0, left: 0, right: 0, bottom: 0,
                    backgroundColor: attackIndicator.color,
                    zIndex: 0, // Ensure it's behind entities
                    animation: 'fade-in-out 0.5s forwards' // Visual cue for attack
                }} />
            );
        }


        return null;
    }, [playerPosition, enemies, powerUps, weaponPickups, bullets, particles, activePowerUps, currentTheme, enemyAttackIndicators]);

    return (
        <div
            className={`game-container ${isDamaged ? 'screen-shake' : ''}`}
            style={{
                minHeight: '100vh',
                background: currentTheme.background,
                color: 'white',
                fontFamily: 'Arial, sans-serif',
                padding: '10px',
                userSelect: 'none',
                touchAction: 'none' // CSS fix for touch events instead of preventDefault
            }}
        >
            {/* Header */}
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px', flexWrap: 'wrap', gap: '10px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
                    <h1 style={{ margin: 0, fontSize: 'clamp(18px, 4vw, 24px)' }}>🎯 Ultimate Tactical Agent</h1>
                    <div style={{ fontSize: 'clamp(12px, 2.5vw, 16px)' }}>Level {level} - {currentTheme.name}</div>
                </div>
                {gameState === 'playing' && (
                    <div style={{ display: 'flex', alignItems: 'center', gap: '15px', fontSize: 'clamp(12px, 2.5vw, 16px)' }}>
                        <div>⏱️ {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}</div>
                        <div>❤️ {lives}</div>
                        <div>🎯 {score}</div>
                        <div>🔥 {combo}x</div>
                    </div>
                )}
            </div>
            {/* Current Weapon Display */}
            {gameState === 'playing' && (
                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginBottom: '15px', gap: '10px', flexWrap: 'wrap' }}>
                    <div style={{ fontSize: 'clamp(12px, 2.5vw, 14px)', marginRight: '10px' }}>Current Weapon:</div>
                    <div style={{
                        display: 'flex', alignItems: 'center', gap: '5px',
                        padding: '5px 10px',
                        backgroundColor: currentWeapon.color,
                        border: `2px solid ${currentWeapon.color}`,
                        borderRadius: '15px',
                        fontSize: 'clamp(10px, 2vw, 12px)',
                        boxShadow: `0 0 10px ${currentWeapon.color}`
                    }}>
                        <span style={{ fontSize: 'clamp(14px, 3vw, 18px)' }} role="img" aria-label="weapon">{currentWeapon.emoji}</span>
                        <span>{currentWeapon.description}</span>
                        {currentWeapon.type !== BASE_PISTOL.type && currentWeaponEndTime > Date.now() && (
                            <span style={{ marginLeft: '5px', color: 'rgba(255,255,255,0.7)' }}>
                                ({Math.ceil((currentWeaponEndTime - Date.now()) / 1000)}s)
                            </span>
                        )}
                    </div>
                </div>
            )}

            {/* Game Grid */}
            {gameState === 'playing' && (
                <>
                    <div style={{ fontSize: 'clamp(14px, 3vw, 18px)', textAlign: 'center', marginBottom: '10px' }}>
                        Mission: {currentMission.description} ({missionProgress}/{currentMission.target})
                    </div>
                    <div style={{
                        display: 'grid',
                        gridTemplateColumns: `repeat(${GRID_SIZE}, 1fr)`,
                        gap: '2px',
                        maxWidth: '600px',
                        margin: '0 auto',
                        aspectRatio: '1',
                        backgroundColor: 'rgba(0,0,0,0.3)',
                        padding: '10px',
                        borderRadius: '15px',
                        border: `3px solid ${currentTheme.cellBorder}`
                    }}>
                        {Array.from({ length: GRID_SIZE * GRID_SIZE }, (_, index) => {
                            const x = index % GRID_SIZE;
                            const y = Math.floor(index / GRID_SIZE);
                            const isAdjacent = Math.abs(x - playerPosition.x) <= 1 && Math.abs(y - playerPosition.y) <= 1;
                            // const hasEnemyThreat = enemies.some(e =>
                            //     Math.abs(e.x - x) <= e.damageRadius && Math.abs(e.y - y) <= e.damageRadius && e.attacking
                            // );
                            const isEnemyThreatTarget = enemyAttackIndicators.some(ind =>
                                Math.abs(x - ind.x) <= ind.radius && Math.abs(y - ind.y) <= ind.radius
                            );

                            return (
                                <div
                                    key={index}
                                    onClick={() => handleCellClick(x, y)}
                                    onTouchStart={() => handleCellClick(x, y)}
                                    style={{
                                        backgroundColor: isEnemyThreatTarget ? currentTheme.threatColor : (isAdjacent ? currentTheme.adjacentColor : currentTheme.cellColor),
                                        border: `1px solid ${currentTheme.cellBorder}`,
                                        borderRadius: '8px',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        cursor: 'pointer',
                                        transition: 'all 0.1s ease', // Faster transition for responsiveness
                                        position: 'relative',
                                        minHeight: '40px',
                                        boxShadow: isEnemyThreatTarget ? `0 0 10px ${currentTheme.threatColor}` : 'none'
                                    }}
                                >
                                    {renderCell(x, y)}
                                </div>
                            );
                        })}
                    </div>
                </>
            )}
            {/* Active Power-ups */}
            {gameState === 'playing' && Object.keys(activePowerUps).length > 0 && (
                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '15px', gap: '10px', flexWrap: 'wrap' }}>
                    <div style={{ fontSize: 'clamp(12px, 2.5vw, 14px)', marginRight: '10px' }}>Active:</div>
                    {Object.entries(activePowerUps).map(([type, endTime]) => {
                        const powerUp = [...POWERUP_TYPES, ...SUPER_WEAPONS].find(p => p.type === type);
                        if (!powerUp || endTime <= Date.now()) return null;
                        const timeLeft = Math.ceil((endTime - Date.now()) / 1000);
                        return (
                            <div key={type} style={{
                                display: 'flex', alignItems: 'center', gap: '5px',
                                padding: '5px 10px',
                                backgroundColor: powerUp.color,
                                border: '2px solid white',
                                borderRadius: '15px',
                                fontSize: 'clamp(10px, 2vw, 12px)'
                            }}>
                                <span style={{ fontSize: 'clamp(14px, 3vw, 18px)' }} role="img" aria-label="powerup">{powerUp.emoji}</span>
                                <span>{timeLeft}s</span>
                            </div>
                        );
                    })}
                </div>
            )}

            {/* Ready Screen */}
            {gameState === 'ready' && (
                <div style={{ textAlign: 'center', maxWidth: '600px', margin: '20px auto', padding: '20px' }}>
                    <h2 style={{ fontSize: 'clamp(20px, 5vw, 32px)', marginBottom: '20px' }}>🎯 Ultimate Tactical Agent Game</h2>
                    <div style={{ marginBottom: '20px', fontSize: 'clamp(14px, 3vw, 18px)' }}>
                        <p><strong>🎮 How to Play:</strong></p>
                        <p>• Click/tap enemies to **shoot** them.</p>
                        <p>• Click/tap **power-ups** and **weapons** to collect them.</p>
                        <p>• Click/tap **adjacent empty spaces** to move. You can only move one square at a time.</p>
                        <p>• Enemies attack when you are within their **threat range**. Look for the **red glow**!</p>
                    </div>
                    <div style={{ marginBottom: '20px' }}>
                        <label style={{ fontSize: 'clamp(14px, 3vw, 18px)', marginRight: '10px' }}>Difficulty:</label>
                        <select
                            value={difficulty}
                            onChange={(e) => setDifficulty(e.target.value)}
                            style={{
                                padding: '8px 12px',
                                fontSize: 'clamp(12px, 2.5vw, 16px)',
                                backgroundColor: 'rgba(255,255,255,0.9)',
                                color: 'black',
                                border: '1px solid rgba(255,255,255,0.3)',
                                borderRadius: '8px'
                            }}
                        >
                            <option value="easy">Easy</option>
                            <option value="normal">Normal</option>
                            <option value="hard">Hard</option>
                        </select>
                    </div>
                    <button
                        onClick={startGame}
                        style={{
                            padding: '15px 30px',
                            fontSize: 'clamp(16px, 4vw, 20px)',
                            backgroundColor: '#3b82f6',
                            color: 'white',
                            border: 'none',
                            borderRadius: '12px',
                            cursor: 'pointer',
                            boxShadow: '0 4px 15px rgba(59, 130, 246, 0.4)'
                        }}
                    >
                        🚀 Start Mission
                    </button>
                    <div style={{ marginTop: '20px', fontSize: 'clamp(12px, 2.5vw, 16px)' }}>
                        High Score: {highScore.toLocaleString()}
                    </div>
                </div>
            )}

            {/* Game Over Screen */}
            {(gameState === 'won' || gameState === 'lost') && (
                <div style={{ textAlign: 'center', maxWidth: '600px', margin: '20px auto', padding: '20px' }}>
                    <h2 style={{
                        fontSize: 'clamp(24px, 6vw, 36px)',
                        marginBottom: '20px',
                        color: gameState === 'won' ? '#10b981' : '#ef4444'
                    }}>
                        {gameState === 'won' ? '🎉 Mission Complete!' : '💀 Mission Failed'}
                    </h2>
                    <div style={{
                        fontSize: 'clamp(16px, 4vw, 20px)',
                        marginBottom: '20px',
                        display: 'grid',
                        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                        gap: '15px'
                    }}>
                        <div style={{ padding: '15px', backgroundColor: 'rgba(255,255,255,0.1)', borderRadius: '10px' }}>
                            <div>🎯 Final Score</div>
                            <div style={{ fontSize: 'clamp(20px, 5vw, 28px)', fontWeight: 'bold', color: '#fbbf24' }}>
                                {score.toLocaleString()}
                            </div>
                        </div>
                        <div style={{ padding: '15px', backgroundColor: 'rgba(255,255,255,0.1)', borderRadius: '10px' }}>
                            <div>💀 Enemies Defeated</div>
                            <div style={{ fontSize: 'clamp(20px, 5vw, 28px)', fontWeight: 'bold', color: '#ef4444' }}>
                                {enemiesKilled}
                            </div>
                        </div>
                        <div style={{ padding: '15px', backgroundColor: 'rgba(255,255,255,0.1)', borderRadius: '10px' }}>
                            <div>🔥 Max Combo</div>
                            <div style={{ fontSize: 'clamp(20px, 5vw, 28px)', fontWeight: 'bold', color: '#f97316' }}>
                                {maxCombo}x
                            </div>
                        </div>
                    </div>
                    {score > highScore && (
                        <div style={{ fontSize: 'clamp(18px, 4vw, 24px)', color: '#fbbf24', marginBottom: '20px' }}>
                            🏆 NEW HIGH SCORE! 🏆
                        </div>
                    )}
                    <button
                        onClick={() => setGameState('ready')}
                        style={{
                            padding: '15px 30px',
                            fontSize: 'clamp(16px, 4vw, 20px)',
                            backgroundColor: '#3b82f6',
                            color: 'white',
                            border: 'none',
                            borderRadius: '12px',
                            cursor: 'pointer',
                            boxShadow: '0 4px 15px rgba(59, 130, 246, 0.4)'
                        }}
                    >
                        🔄 Play Again
                    </button>
                </div>
            )}
        </div>
    );
}

export default UltimateTacticalAgentGame;


/* ==== FILE: vite.config.js ==== */

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'
import path from 'path'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(),tailwindcss()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})
